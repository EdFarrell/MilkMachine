# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Edward\.qgis2\python\plugins\MilkMachine\ui_milkmachine.ui'
#
# Created: Mon Oct 19 20:50:26 2015
#      by: PyQt4 UI code generator 4.10.2
#
# WARNING! All changes made in this file will be lost!

from PyQt4 import QtCore, QtGui

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

class Ui_MilkMachine(object):
    def setupUi(self, MilkMachine):
        MilkMachine.setObjectName(_fromUtf8("MilkMachine"))
        MilkMachine.setEnabled(True)
        MilkMachine.resize(657, 472)
        self.tabWidget = QtGui.QTabWidget(MilkMachine)
        self.tabWidget.setEnabled(True)
        self.tabWidget.setGeometry(QtCore.QRect(10, 10, 641, 451))
        font = QtGui.QFont()
        font.setFamily(_fromUtf8("Tahoma"))
        font.setPointSize(8)
        self.tabWidget.setFont(font)
        self.tabWidget.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.tabWidget.setAcceptDrops(False)
        self.tabWidget.setTabShape(QtGui.QTabWidget.Rounded)
        self.tabWidget.setElideMode(QtCore.Qt.ElideNone)
        self.tabWidget.setDocumentMode(False)
        self.tabWidget.setTabsClosable(False)
        self.tabWidget.setMovable(True)
        self.tabWidget.setObjectName(_fromUtf8("tabWidget"))
        self.tab_import = QtGui.QWidget()
        self.tab_import.setObjectName(_fromUtf8("tab_import"))
        self.pushButton_Audio1info = QtGui.QPushButton(self.tab_import)
        self.pushButton_Audio1info.setEnabled(False)
        self.pushButton_Audio1info.setGeometry(QtCore.QRect(460, 127, 31, 30))
        self.pushButton_Audio1info.setText(_fromUtf8(""))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(_fromUtf8(":/plugins/milkmachine/question.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_Audio1info.setIcon(icon)
        self.pushButton_Audio1info.setIconSize(QtCore.QSize(24, 24))
        self.pushButton_Audio1info.setObjectName(_fromUtf8("pushButton_Audio1info"))
        self.buttonImportGPS = QtGui.QPushButton(self.tab_import)
        self.buttonImportGPS.setGeometry(QtCore.QRect(20, 20, 101, 30))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.buttonImportGPS.sizePolicy().hasHeightForWidth())
        self.buttonImportGPS.setSizePolicy(sizePolicy)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(_fromUtf8(":/plugins/milkmachine/Import.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.buttonImportGPS.setIcon(icon1)
        self.buttonImportGPS.setObjectName(_fromUtf8("buttonImportGPS"))
        self.label_2 = QtGui.QLabel(self.tab_import)
        self.label_2.setGeometry(QtCore.QRect(381, 160, 91, 16))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setObjectName(_fromUtf8("label_2"))
        self.pushButton_clearAudio1 = QtGui.QPushButton(self.tab_import)
        self.pushButton_clearAudio1.setEnabled(False)
        self.pushButton_clearAudio1.setGeometry(QtCore.QRect(420, 127, 31, 30))
        self.pushButton_clearAudio1.setText(_fromUtf8(""))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(_fromUtf8(":/plugins/milkmachine/delete.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_clearAudio1.setIcon(icon2)
        self.pushButton_clearAudio1.setObjectName(_fromUtf8("pushButton_clearAudio1"))
        self.buttonDrawTrack = QtGui.QPushButton(self.tab_import)
        self.buttonDrawTrack.setEnabled(False)
        self.buttonDrawTrack.setGeometry(QtCore.QRect(20, 60, 101, 30))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.buttonDrawTrack.sizePolicy().hasHeightForWidth())
        self.buttonDrawTrack.setSizePolicy(sizePolicy)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(_fromUtf8(":/plugins/milkmachine/pencil.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.buttonDrawTrack.setIcon(icon3)
        self.buttonDrawTrack.setObjectName(_fromUtf8("buttonDrawTrack"))
        self.lineEdit_ImportGPS = QtGui.QLineEdit(self.tab_import)
        self.lineEdit_ImportGPS.setGeometry(QtCore.QRect(140, 20, 271, 30))
        self.lineEdit_ImportGPS.setAutoFillBackground(False)
        self.lineEdit_ImportGPS.setDragEnabled(True)
        self.lineEdit_ImportGPS.setObjectName(_fromUtf8("lineEdit_ImportGPS"))
        self.pushButton_Audio1 = QtGui.QPushButton(self.tab_import)
        self.pushButton_Audio1.setEnabled(False)
        self.pushButton_Audio1.setGeometry(QtCore.QRect(20, 177, 31, 30))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(_fromUtf8(":/plugins/milkmachine/play.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_Audio1.setIcon(icon4)
        self.pushButton_Audio1.setObjectName(_fromUtf8("pushButton_Audio1"))
        self.lcdNumber_Audio1_C = QtGui.QLCDNumber(self.tab_import)
        self.lcdNumber_Audio1_C.setGeometry(QtCore.QRect(100, 177, 131, 30))
        self.lcdNumber_Audio1_C.setSmallDecimalPoint(False)
        self.lcdNumber_Audio1_C.setDigitCount(8)
        self.lcdNumber_Audio1_C.setObjectName(_fromUtf8("lcdNumber_Audio1_C"))
        self.pushButton_stop1 = QtGui.QPushButton(self.tab_import)
        self.pushButton_stop1.setEnabled(False)
        self.pushButton_stop1.setGeometry(QtCore.QRect(60, 177, 31, 30))
        self.pushButton_stop1.setText(_fromUtf8(""))
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(_fromUtf8(":/plugins/milkmachine/stop.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_stop1.setIcon(icon5)
        self.pushButton_stop1.setObjectName(_fromUtf8("pushButton_stop1"))
        self.label_3 = QtGui.QLabel(self.tab_import)
        self.label_3.setGeometry(QtCore.QRect(260, 160, 111, 16))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        self.label_3.setObjectName(_fromUtf8("label_3"))
        self.lcdNumber_Audio1_D = QtGui.QLCDNumber(self.tab_import)
        self.lcdNumber_Audio1_D.setGeometry(QtCore.QRect(240, 177, 131, 30))
        self.lcdNumber_Audio1_D.setDigitCount(8)
        self.lcdNumber_Audio1_D.setObjectName(_fromUtf8("lcdNumber_Audio1_D"))
        self.label = QtGui.QLabel(self.tab_import)
        self.label.setGeometry(QtCore.QRect(125, 160, 101, 16))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setObjectName(_fromUtf8("label"))
        self.lcdNumber_Audio1_P = QtGui.QLCDNumber(self.tab_import)
        self.lcdNumber_Audio1_P.setGeometry(QtCore.QRect(380, 177, 81, 30))
        self.lcdNumber_Audio1_P.setObjectName(_fromUtf8("lcdNumber_Audio1_P"))
        self.buttonImport_audio = QtGui.QPushButton(self.tab_import)
        self.buttonImport_audio.setGeometry(QtCore.QRect(20, 127, 101, 30))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.buttonImport_audio.sizePolicy().hasHeightForWidth())
        self.buttonImport_audio.setSizePolicy(sizePolicy)
        self.buttonImport_audio.setIcon(icon1)
        self.buttonImport_audio.setObjectName(_fromUtf8("buttonImport_audio"))
        self.lineEdit_InAudio1 = QtGui.QLineEdit(self.tab_import)
        self.lineEdit_InAudio1.setGeometry(QtCore.QRect(140, 126, 271, 30))
        self.lineEdit_InAudio1.setObjectName(_fromUtf8("lineEdit_InAudio1"))
        self.pushButton_sync = QtGui.QPushButton(self.tab_import)
        self.pushButton_sync.setEnabled(False)
        self.pushButton_sync.setGeometry(QtCore.QRect(500, 127, 31, 30))
        self.pushButton_sync.setText(_fromUtf8(""))
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(_fromUtf8(":/plugins/milkmachine/synchronize.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_sync.setIcon(icon6)
        self.pushButton_sync.setIconSize(QtCore.QSize(24, 24))
        self.pushButton_sync.setObjectName(_fromUtf8("pushButton_sync"))
        self.checkBox_headoftrack = QtGui.QCheckBox(self.tab_import)
        self.checkBox_headoftrack.setEnabled(False)
        self.checkBox_headoftrack.setGeometry(QtCore.QRect(140, 60, 161, 30))
        self.checkBox_headoftrack.setObjectName(_fromUtf8("checkBox_headoftrack"))
        self.checkBox_import_indicator = QtGui.QCheckBox(self.tab_import)
        self.checkBox_import_indicator.setEnabled(True)
        self.checkBox_import_indicator.setGeometry(QtCore.QRect(20, 217, 181, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBox_import_indicator.sizePolicy().hasHeightForWidth())
        self.checkBox_import_indicator.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily(_fromUtf8("Tahoma"))
        self.checkBox_import_indicator.setFont(font)
        self.checkBox_import_indicator.setChecked(True)
        self.checkBox_import_indicator.setObjectName(_fromUtf8("checkBox_import_indicator"))
        self.line_3 = QtGui.QFrame(self.tab_import)
        self.line_3.setGeometry(QtCore.QRect(20, 100, 571, 16))
        self.line_3.setFrameShape(QtGui.QFrame.HLine)
        self.line_3.setFrameShadow(QtGui.QFrame.Sunken)
        self.line_3.setObjectName(_fromUtf8("line_3"))
        self.checkBox_sync_point = QtGui.QCheckBox(self.tab_import)
        self.checkBox_sync_point.setEnabled(False)
        self.checkBox_sync_point.setGeometry(QtCore.QRect(540, 120, 91, 41))
        self.checkBox_sync_point.setObjectName(_fromUtf8("checkBox_sync_point"))
        self.comboBox_importDateFormat = QtGui.QComboBox(self.tab_import)
        self.comboBox_importDateFormat.setGeometry(QtCore.QRect(490, 20, 121, 30))
        self.comboBox_importDateFormat.setObjectName(_fromUtf8("comboBox_importDateFormat"))
        self.label_68 = QtGui.QLabel(self.tab_import)
        self.label_68.setGeometry(QtCore.QRect(440, 20, 51, 30))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_68.sizePolicy().hasHeightForWidth())
        self.label_68.setSizePolicy(sizePolicy)
        self.label_68.setObjectName(_fromUtf8("label_68"))
        self.tabWidget.addTab(self.tab_import, _fromUtf8(""))
        self.tab_2 = QtGui.QWidget()
        self.tab_2.setObjectName(_fromUtf8("tab_2"))
        self.dateTimeEdit_start = QtGui.QDateTimeEdit(self.tab_2)
        self.dateTimeEdit_start.setEnabled(False)
        self.dateTimeEdit_start.setGeometry(QtCore.QRect(110, 70, 194, 22))
        self.dateTimeEdit_start.setDateTime(QtCore.QDateTime(QtCore.QDate(2014, 5, 1), QtCore.QTime(0, 0, 0)))
        self.dateTimeEdit_start.setDate(QtCore.QDate(2014, 5, 1))
        self.dateTimeEdit_start.setCalendarPopup(True)
        self.dateTimeEdit_start.setObjectName(_fromUtf8("dateTimeEdit_start"))
        self.checkBox_time_edit = QtGui.QCheckBox(self.tab_2)
        self.checkBox_time_edit.setEnabled(False)
        self.checkBox_time_edit.setGeometry(QtCore.QRect(240, 21, 131, 16))
        self.checkBox_time_edit.setObjectName(_fromUtf8("checkBox_time_edit"))
        self.lineEdit_time_active = QtGui.QLineEdit(self.tab_2)
        self.lineEdit_time_active.setEnabled(False)
        self.lineEdit_time_active.setGeometry(QtCore.QRect(90, 18, 131, 20))
        self.lineEdit_time_active.setObjectName(_fromUtf8("lineEdit_time_active"))
        self.label_visualization_active_5 = QtGui.QLabel(self.tab_2)
        self.label_visualization_active_5.setGeometry(QtCore.QRect(20, 20, 81, 16))
        self.label_visualization_active_5.setObjectName(_fromUtf8("label_visualization_active_5"))
        self.label_visualization_active_6 = QtGui.QLabel(self.tab_2)
        self.label_visualization_active_6.setGeometry(QtCore.QRect(20, 70, 81, 22))
        self.label_visualization_active_6.setObjectName(_fromUtf8("label_visualization_active_6"))
        self.dateTimeEdit_end = QtGui.QDateTimeEdit(self.tab_2)
        self.dateTimeEdit_end.setEnabled(False)
        self.dateTimeEdit_end.setGeometry(QtCore.QRect(110, 100, 194, 22))
        self.dateTimeEdit_end.setDateTime(QtCore.QDateTime(QtCore.QDate(2014, 5, 1), QtCore.QTime(0, 0, 0)))
        self.dateTimeEdit_end.setDate(QtCore.QDate(2014, 5, 1))
        self.dateTimeEdit_end.setCalendarPopup(True)
        self.dateTimeEdit_end.setObjectName(_fromUtf8("dateTimeEdit_end"))
        self.label_visualization_active_7 = QtGui.QLabel(self.tab_2)
        self.label_visualization_active_7.setGeometry(QtCore.QRect(20, 100, 81, 22))
        self.label_visualization_active_7.setObjectName(_fromUtf8("label_visualization_active_7"))
        self.pushButton_time_apply_startend = QtGui.QPushButton(self.tab_2)
        self.pushButton_time_apply_startend.setEnabled(False)
        self.pushButton_time_apply_startend.setGeometry(QtCore.QRect(110, 150, 61, 23))
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(_fromUtf8(":/plugins/milkmachine/triangle.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_time_apply_startend.setIcon(icon7)
        self.pushButton_time_apply_startend.setObjectName(_fromUtf8("pushButton_time_apply_startend"))
        self.tabWidget.addTab(self.tab_2, _fromUtf8(""))
        self.tab_3 = QtGui.QWidget()
        self.tab_3.setObjectName(_fromUtf8("tab_3"))
        self.lineEdit_filtering_active = QtGui.QLineEdit(self.tab_3)
        self.lineEdit_filtering_active.setEnabled(False)
        self.lineEdit_filtering_active.setGeometry(QtCore.QRect(90, 18, 131, 20))
        self.lineEdit_filtering_active.setObjectName(_fromUtf8("lineEdit_filtering_active"))
        self.label_visualization_active_4 = QtGui.QLabel(self.tab_3)
        self.label_visualization_active_4.setGeometry(QtCore.QRect(20, 20, 81, 16))
        self.label_visualization_active_4.setObjectName(_fromUtf8("label_visualization_active_4"))
        self.checkBox_filtering_edit = QtGui.QCheckBox(self.tab_3)
        self.checkBox_filtering_edit.setEnabled(False)
        self.checkBox_filtering_edit.setGeometry(QtCore.QRect(240, 21, 111, 16))
        self.checkBox_filtering_edit.setObjectName(_fromUtf8("checkBox_filtering_edit"))
        self.frame = QtGui.QFrame(self.tab_3)
        self.frame.setGeometry(QtCore.QRect(50, 130, 471, 291))
        self.frame.setFrameShape(QtGui.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtGui.QFrame.Raised)
        self.frame.setObjectName(_fromUtf8("frame"))
        self.checkBox_filtering_showplot = QtGui.QCheckBox(self.frame)
        self.checkBox_filtering_showplot.setEnabled(False)
        self.checkBox_filtering_showplot.setGeometry(QtCore.QRect(110, 240, 101, 23))
        self.checkBox_filtering_showplot.setObjectName(_fromUtf8("checkBox_filtering_showplot"))
        self.label_66 = QtGui.QLabel(self.frame)
        self.label_66.setEnabled(False)
        self.label_66.setGeometry(QtCore.QRect(180, 130, 81, 22))
        self.label_66.setObjectName(_fromUtf8("label_66"))
        self.radioButton_filtering_linear = QtGui.QRadioButton(self.frame)
        self.radioButton_filtering_linear.setEnabled(False)
        self.radioButton_filtering_linear.setGeometry(QtCore.QRect(30, 40, 61, 22))
        self.radioButton_filtering_linear.setObjectName(_fromUtf8("radioButton_filtering_linear"))
        self.radioButton_filtering_quad = QtGui.QRadioButton(self.frame)
        self.radioButton_filtering_quad.setEnabled(False)
        self.radioButton_filtering_quad.setGeometry(QtCore.QRect(30, 70, 82, 22))
        self.radioButton_filtering_quad.setObjectName(_fromUtf8("radioButton_filtering_quad"))
        self.spinBox_filtering_moving = QtGui.QSpinBox(self.frame)
        self.spinBox_filtering_moving.setEnabled(False)
        self.spinBox_filtering_moving.setGeometry(QtCore.QRect(230, 130, 42, 22))
        self.spinBox_filtering_moving.setMinimum(3)
        self.spinBox_filtering_moving.setSingleStep(2)
        self.spinBox_filtering_moving.setObjectName(_fromUtf8("spinBox_filtering_moving"))
        self.pushButton_filtering_apply = QtGui.QPushButton(self.frame)
        self.pushButton_filtering_apply.setEnabled(False)
        self.pushButton_filtering_apply.setGeometry(QtCore.QRect(30, 240, 61, 23))
        self.pushButton_filtering_apply.setIcon(icon7)
        self.pushButton_filtering_apply.setObjectName(_fromUtf8("pushButton_filtering_apply"))
        self.radioButton_filtering_moving = QtGui.QRadioButton(self.frame)
        self.radioButton_filtering_moving.setEnabled(False)
        self.radioButton_filtering_moving.setGeometry(QtCore.QRect(30, 130, 111, 22))
        self.radioButton_filtering_moving.setObjectName(_fromUtf8("radioButton_filtering_moving"))
        self.label_43 = QtGui.QLabel(self.frame)
        self.label_43.setGeometry(QtCore.QRect(20, 10, 101, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_43.setFont(font)
        self.label_43.setObjectName(_fromUtf8("label_43"))
        self.line_2 = QtGui.QFrame(self.frame)
        self.line_2.setGeometry(QtCore.QRect(20, 215, 401, 20))
        self.line_2.setFrameShape(QtGui.QFrame.HLine)
        self.line_2.setFrameShadow(QtGui.QFrame.Sunken)
        self.line_2.setObjectName(_fromUtf8("line_2"))
        self.label_46 = QtGui.QLabel(self.frame)
        self.label_46.setEnabled(False)
        self.label_46.setGeometry(QtCore.QRect(180, 40, 51, 22))
        self.label_46.setObjectName(_fromUtf8("label_46"))
        self.label_47 = QtGui.QLabel(self.frame)
        self.label_47.setEnabled(False)
        self.label_47.setGeometry(QtCore.QRect(300, 40, 51, 22))
        self.label_47.setObjectName(_fromUtf8("label_47"))
        self.doubleSpinBox_filtering_xweight = QtGui.QDoubleSpinBox(self.frame)
        self.doubleSpinBox_filtering_xweight.setEnabled(False)
        self.doubleSpinBox_filtering_xweight.setGeometry(QtCore.QRect(230, 40, 51, 22))
        self.doubleSpinBox_filtering_xweight.setDecimals(1)
        self.doubleSpinBox_filtering_xweight.setMaximum(1.0)
        self.doubleSpinBox_filtering_xweight.setSingleStep(0.1)
        self.doubleSpinBox_filtering_xweight.setProperty("value", 1.0)
        self.doubleSpinBox_filtering_xweight.setObjectName(_fromUtf8("doubleSpinBox_filtering_xweight"))
        self.doubleSpinBox_filtering_yweight = QtGui.QDoubleSpinBox(self.frame)
        self.doubleSpinBox_filtering_yweight.setEnabled(False)
        self.doubleSpinBox_filtering_yweight.setGeometry(QtCore.QRect(350, 40, 51, 22))
        self.doubleSpinBox_filtering_yweight.setDecimals(1)
        self.doubleSpinBox_filtering_yweight.setMaximum(1.0)
        self.doubleSpinBox_filtering_yweight.setSingleStep(0.1)
        self.doubleSpinBox_filtering_yweight.setProperty("value", 1.0)
        self.doubleSpinBox_filtering_yweight.setObjectName(_fromUtf8("doubleSpinBox_filtering_yweight"))
        self.radioButton_filtering_zscale = QtGui.QRadioButton(self.frame)
        self.radioButton_filtering_zscale.setEnabled(False)
        self.radioButton_filtering_zscale.setGeometry(QtCore.QRect(30, 160, 131, 22))
        self.radioButton_filtering_zscale.setObjectName(_fromUtf8("radioButton_filtering_zscale"))
        self.label_48 = QtGui.QLabel(self.frame)
        self.label_48.setEnabled(False)
        self.label_48.setGeometry(QtCore.QRect(180, 160, 51, 20))
        self.label_48.setObjectName(_fromUtf8("label_48"))
        self.label_52 = QtGui.QLabel(self.frame)
        self.label_52.setEnabled(False)
        self.label_52.setGeometry(QtCore.QRect(275, 160, 51, 20))
        self.label_52.setObjectName(_fromUtf8("label_52"))
        self.lineEdit_filtering_min = QtGui.QLineEdit(self.frame)
        self.lineEdit_filtering_min.setEnabled(False)
        self.lineEdit_filtering_min.setGeometry(QtCore.QRect(230, 160, 31, 20))
        self.lineEdit_filtering_min.setObjectName(_fromUtf8("lineEdit_filtering_min"))
        self.lineEdit_filtering_max = QtGui.QLineEdit(self.frame)
        self.lineEdit_filtering_max.setEnabled(False)
        self.lineEdit_filtering_max.setGeometry(QtCore.QRect(330, 160, 31, 20))
        self.lineEdit_filtering_max.setObjectName(_fromUtf8("lineEdit_filtering_max"))
        self.radioButton_filtering_center = QtGui.QRadioButton(self.frame)
        self.radioButton_filtering_center.setEnabled(False)
        self.radioButton_filtering_center.setGeometry(QtCore.QRect(30, 100, 121, 22))
        self.radioButton_filtering_center.setObjectName(_fromUtf8("radioButton_filtering_center"))
        self.label_63 = QtGui.QLabel(self.frame)
        self.label_63.setEnabled(False)
        self.label_63.setGeometry(QtCore.QRect(180, 100, 51, 22))
        self.label_63.setObjectName(_fromUtf8("label_63"))
        self.doubleSpinBox_filtering_center_weight = QtGui.QDoubleSpinBox(self.frame)
        self.doubleSpinBox_filtering_center_weight.setEnabled(False)
        self.doubleSpinBox_filtering_center_weight.setGeometry(QtCore.QRect(230, 100, 51, 22))
        self.doubleSpinBox_filtering_center_weight.setDecimals(1)
        self.doubleSpinBox_filtering_center_weight.setMaximum(1.0)
        self.doubleSpinBox_filtering_center_weight.setSingleStep(0.1)
        self.doubleSpinBox_filtering_center_weight.setProperty("value", 1.0)
        self.doubleSpinBox_filtering_center_weight.setObjectName(_fromUtf8("doubleSpinBox_filtering_center_weight"))
        self.label_64 = QtGui.QLabel(self.frame)
        self.label_64.setEnabled(False)
        self.label_64.setGeometry(QtCore.QRect(180, 70, 51, 22))
        self.label_64.setObjectName(_fromUtf8("label_64"))
        self.comboBox_filtering_spline = QtGui.QComboBox(self.frame)
        self.comboBox_filtering_spline.setEnabled(False)
        self.comboBox_filtering_spline.setGeometry(QtCore.QRect(230, 70, 91, 22))
        self.comboBox_filtering_spline.setObjectName(_fromUtf8("comboBox_filtering_spline"))
        self.label_65 = QtGui.QLabel(self.frame)
        self.label_65.setEnabled(False)
        self.label_65.setGeometry(QtCore.QRect(340, 70, 51, 22))
        self.label_65.setObjectName(_fromUtf8("label_65"))
        self.doubleSpinBox_filtering_spline_weight = QtGui.QDoubleSpinBox(self.frame)
        self.doubleSpinBox_filtering_spline_weight.setEnabled(False)
        self.doubleSpinBox_filtering_spline_weight.setGeometry(QtCore.QRect(390, 70, 51, 22))
        self.doubleSpinBox_filtering_spline_weight.setDecimals(1)
        self.doubleSpinBox_filtering_spline_weight.setMaximum(1.0)
        self.doubleSpinBox_filtering_spline_weight.setSingleStep(0.1)
        self.doubleSpinBox_filtering_spline_weight.setProperty("value", 1.0)
        self.doubleSpinBox_filtering_spline_weight.setObjectName(_fromUtf8("doubleSpinBox_filtering_spline_weight"))
        self.frame_2 = QtGui.QFrame(self.tab_3)
        self.frame_2.setGeometry(QtCore.QRect(50, 50, 281, 80))
        self.frame_2.setFrameShape(QtGui.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtGui.QFrame.Raised)
        self.frame_2.setObjectName(_fromUtf8("frame_2"))
        self.label_45 = QtGui.QLabel(self.frame_2)
        self.label_45.setGeometry(QtCore.QRect(20, 20, 131, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_45.setFont(font)
        self.label_45.setObjectName(_fromUtf8("label_45"))
        self.radioButton_filtering_xy = QtGui.QRadioButton(self.frame_2)
        self.radioButton_filtering_xy.setEnabled(False)
        self.radioButton_filtering_xy.setGeometry(QtCore.QRect(30, 50, 41, 20))
        self.radioButton_filtering_xy.setChecked(True)
        self.radioButton_filtering_xy.setObjectName(_fromUtf8("radioButton_filtering_xy"))
        self.radioButton_filtering_z = QtGui.QRadioButton(self.frame_2)
        self.radioButton_filtering_z.setEnabled(False)
        self.radioButton_filtering_z.setGeometry(QtCore.QRect(90, 50, 82, 20))
        self.radioButton_filtering_z.setObjectName(_fromUtf8("radioButton_filtering_z"))
        self.tabWidget.addTab(self.tab_3, _fromUtf8(""))
        self.tab_rendering = QtGui.QWidget()
        self.tab_rendering.setObjectName(_fromUtf8("tab_rendering"))
        self.lineEdit_rendering_active = QtGui.QLineEdit(self.tab_rendering)
        self.lineEdit_rendering_active.setEnabled(False)
        self.lineEdit_rendering_active.setGeometry(QtCore.QRect(90, 18, 131, 20))
        self.lineEdit_rendering_active.setObjectName(_fromUtf8("lineEdit_rendering_active"))
        self.label_visualization_active_3 = QtGui.QLabel(self.tab_rendering)
        self.label_visualization_active_3.setGeometry(QtCore.QRect(20, 20, 81, 16))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_visualization_active_3.sizePolicy().hasHeightForWidth())
        self.label_visualization_active_3.setSizePolicy(sizePolicy)
        self.label_visualization_active_3.setObjectName(_fromUtf8("label_visualization_active_3"))
        self.checkBox_rendering_edit = QtGui.QCheckBox(self.tab_rendering)
        self.checkBox_rendering_edit.setEnabled(False)
        self.checkBox_rendering_edit.setGeometry(QtCore.QRect(240, 21, 111, 16))
        self.checkBox_rendering_edit.setObjectName(_fromUtf8("checkBox_rendering_edit"))
        self.groupBox_3 = QtGui.QGroupBox(self.tab_rendering)
        self.groupBox_3.setGeometry(QtCore.QRect(203, 50, 184, 121))
        self.groupBox_3.setObjectName(_fromUtf8("groupBox_3"))
        self.label_17 = QtGui.QLabel(self.groupBox_3)
        self.label_17.setGeometry(QtCore.QRect(13, 41, 61, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_17.sizePolicy().hasHeightForWidth())
        self.label_17.setSizePolicy(sizePolicy)
        self.label_17.setObjectName(_fromUtf8("label_17"))
        self.label_16 = QtGui.QLabel(self.groupBox_3)
        self.label_16.setGeometry(QtCore.QRect(13, 20, 41, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_16.sizePolicy().hasHeightForWidth())
        self.label_16.setSizePolicy(sizePolicy)
        self.label_16.setObjectName(_fromUtf8("label_16"))
        self.comboBox_rendering_label_colormode = QtGui.QComboBox(self.groupBox_3)
        self.comboBox_rendering_label_colormode.setEnabled(False)
        self.comboBox_rendering_label_colormode.setGeometry(QtCore.QRect(76, 41, 101, 20))
        self.comboBox_rendering_label_colormode.setObjectName(_fromUtf8("comboBox_rendering_label_colormode"))
        self.lineEdit_rendering_label_scale = QtGui.QLineEdit(self.groupBox_3)
        self.lineEdit_rendering_label_scale.setEnabled(False)
        self.lineEdit_rendering_label_scale.setGeometry(QtCore.QRect(76, 62, 101, 20))
        self.lineEdit_rendering_label_scale.setObjectName(_fromUtf8("lineEdit_rendering_label_scale"))
        self.label_18 = QtGui.QLabel(self.groupBox_3)
        self.label_18.setGeometry(QtCore.QRect(13, 62, 41, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_18.sizePolicy().hasHeightForWidth())
        self.label_18.setSizePolicy(sizePolicy)
        self.label_18.setObjectName(_fromUtf8("label_18"))
        self.pushButton_rendering_label_apply = QtGui.QPushButton(self.groupBox_3)
        self.pushButton_rendering_label_apply.setEnabled(False)
        self.pushButton_rendering_label_apply.setGeometry(QtCore.QRect(76, 90, 61, 23))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_rendering_label_apply.sizePolicy().hasHeightForWidth())
        self.pushButton_rendering_label_apply.setSizePolicy(sizePolicy)
        self.pushButton_rendering_label_apply.setIcon(icon7)
        self.pushButton_rendering_label_apply.setObjectName(_fromUtf8("pushButton_rendering_label_apply"))
        self.comboBox_rendering_label_color = QtGui.QComboBox(self.groupBox_3)
        self.comboBox_rendering_label_color.setEnabled(False)
        self.comboBox_rendering_label_color.setGeometry(QtCore.QRect(76, 20, 101, 20))
        self.comboBox_rendering_label_color.setObjectName(_fromUtf8("comboBox_rendering_label_color"))
        self.groupBox_4 = QtGui.QGroupBox(self.tab_rendering)
        self.groupBox_4.setGeometry(QtCore.QRect(5, 50, 193, 251))
        self.groupBox_4.setObjectName(_fromUtf8("groupBox_4"))
        self.comboBox_rendering_icon_colormode = QtGui.QComboBox(self.groupBox_4)
        self.comboBox_rendering_icon_colormode.setEnabled(False)
        self.comboBox_rendering_icon_colormode.setGeometry(QtCore.QRect(85, 62, 101, 20))
        self.comboBox_rendering_icon_colormode.setObjectName(_fromUtf8("comboBox_rendering_icon_colormode"))
        self.label_19 = QtGui.QLabel(self.groupBox_4)
        self.label_19.setGeometry(QtCore.QRect(10, 62, 61, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_19.sizePolicy().hasHeightForWidth())
        self.label_19.setSizePolicy(sizePolicy)
        self.label_19.setObjectName(_fromUtf8("label_19"))
        self.label_20 = QtGui.QLabel(self.groupBox_4)
        self.label_20.setGeometry(QtCore.QRect(10, 20, 61, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_20.sizePolicy().hasHeightForWidth())
        self.label_20.setSizePolicy(sizePolicy)
        self.label_20.setObjectName(_fromUtf8("label_20"))
        self.lineEdit_rendering_icon_scale = QtGui.QLineEdit(self.groupBox_4)
        self.lineEdit_rendering_icon_scale.setEnabled(False)
        self.lineEdit_rendering_icon_scale.setGeometry(QtCore.QRect(85, 83, 101, 20))
        self.lineEdit_rendering_icon_scale.setObjectName(_fromUtf8("lineEdit_rendering_icon_scale"))
        self.label_21 = QtGui.QLabel(self.groupBox_4)
        self.label_21.setGeometry(QtCore.QRect(10, 83, 41, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_21.sizePolicy().hasHeightForWidth())
        self.label_21.setSizePolicy(sizePolicy)
        self.label_21.setObjectName(_fromUtf8("label_21"))
        self.label_22 = QtGui.QLabel(self.groupBox_4)
        self.label_22.setGeometry(QtCore.QRect(10, 104, 51, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_22.sizePolicy().hasHeightForWidth())
        self.label_22.setSizePolicy(sizePolicy)
        self.label_22.setObjectName(_fromUtf8("label_22"))
        self.lineEdit_rendering_icon_heading = QtGui.QLineEdit(self.groupBox_4)
        self.lineEdit_rendering_icon_heading.setEnabled(False)
        self.lineEdit_rendering_icon_heading.setGeometry(QtCore.QRect(85, 104, 101, 20))
        self.lineEdit_rendering_icon_heading.setObjectName(_fromUtf8("lineEdit_rendering_icon_heading"))
        self.label_23 = QtGui.QLabel(self.groupBox_4)
        self.label_23.setGeometry(QtCore.QRect(10, 125, 31, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_23.sizePolicy().hasHeightForWidth())
        self.label_23.setSizePolicy(sizePolicy)
        self.label_23.setObjectName(_fromUtf8("label_23"))
        self.lineEdit_rendering_icon_icon = QtGui.QLineEdit(self.groupBox_4)
        self.lineEdit_rendering_icon_icon.setEnabled(False)
        self.lineEdit_rendering_icon_icon.setGeometry(QtCore.QRect(85, 125, 101, 20))
        self.lineEdit_rendering_icon_icon.setObjectName(_fromUtf8("lineEdit_rendering_icon_icon"))
        self.label_24 = QtGui.QLabel(self.groupBox_4)
        self.label_24.setGeometry(QtCore.QRect(10, 146, 51, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_24.sizePolicy().hasHeightForWidth())
        self.label_24.setSizePolicy(sizePolicy)
        self.label_24.setObjectName(_fromUtf8("label_24"))
        self.lineEdit_rendering_icon_hotspot = QtGui.QLineEdit(self.groupBox_4)
        self.lineEdit_rendering_icon_hotspot.setEnabled(False)
        self.lineEdit_rendering_icon_hotspot.setGeometry(QtCore.QRect(85, 146, 101, 20))
        self.lineEdit_rendering_icon_hotspot.setObjectName(_fromUtf8("lineEdit_rendering_icon_hotspot"))
        self.pushButton_rendering_icon_apply = QtGui.QPushButton(self.groupBox_4)
        self.pushButton_rendering_icon_apply.setEnabled(False)
        self.pushButton_rendering_icon_apply.setGeometry(QtCore.QRect(85, 220, 61, 23))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_rendering_icon_apply.sizePolicy().hasHeightForWidth())
        self.pushButton_rendering_icon_apply.setSizePolicy(sizePolicy)
        self.pushButton_rendering_icon_apply.setIcon(icon7)
        self.pushButton_rendering_icon_apply.setObjectName(_fromUtf8("pushButton_rendering_icon_apply"))
        self.label_25 = QtGui.QLabel(self.groupBox_4)
        self.label_25.setGeometry(QtCore.QRect(10, 41, 71, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_25.sizePolicy().hasHeightForWidth())
        self.label_25.setSizePolicy(sizePolicy)
        self.label_25.setObjectName(_fromUtf8("label_25"))
        self.lineEdit_rendering_icon_transparency = QtGui.QLineEdit(self.groupBox_4)
        self.lineEdit_rendering_icon_transparency.setEnabled(False)
        self.lineEdit_rendering_icon_transparency.setGeometry(QtCore.QRect(85, 41, 101, 20))
        self.lineEdit_rendering_icon_transparency.setObjectName(_fromUtf8("lineEdit_rendering_icon_transparency"))
        self.comboBox_rendering_icon_color = QtGui.QComboBox(self.groupBox_4)
        self.comboBox_rendering_icon_color.setEnabled(False)
        self.comboBox_rendering_icon_color.setGeometry(QtCore.QRect(85, 20, 101, 20))
        self.comboBox_rendering_icon_color.setObjectName(_fromUtf8("comboBox_rendering_icon_color"))
        self.groupBox_5 = QtGui.QGroupBox(self.tab_rendering)
        self.groupBox_5.setGeometry(QtCore.QRect(393, 50, 171, 201))
        self.groupBox_5.setObjectName(_fromUtf8("groupBox_5"))
        self.lineEdit_rendering_model_link = QtGui.QLineEdit(self.groupBox_5)
        self.lineEdit_rendering_model_link.setEnabled(False)
        self.lineEdit_rendering_model_link.setGeometry(QtCore.QRect(63, 20, 71, 20))
        self.lineEdit_rendering_model_link.setObjectName(_fromUtf8("lineEdit_rendering_model_link"))
        self.label_26 = QtGui.QLabel(self.groupBox_5)
        self.label_26.setGeometry(QtCore.QRect(10, 20, 51, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_26.sizePolicy().hasHeightForWidth())
        self.label_26.setSizePolicy(sizePolicy)
        self.label_26.setObjectName(_fromUtf8("label_26"))
        self.label_27 = QtGui.QLabel(self.groupBox_5)
        self.label_27.setGeometry(QtCore.QRect(10, 41, 51, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_27.sizePolicy().hasHeightForWidth())
        self.label_27.setSizePolicy(sizePolicy)
        self.label_27.setObjectName(_fromUtf8("label_27"))
        self.label_28 = QtGui.QLabel(self.groupBox_5)
        self.label_28.setGeometry(QtCore.QRect(10, 62, 51, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_28.sizePolicy().hasHeightForWidth())
        self.label_28.setSizePolicy(sizePolicy)
        self.label_28.setObjectName(_fromUtf8("label_28"))
        self.label_29 = QtGui.QLabel(self.groupBox_5)
        self.label_29.setGeometry(QtCore.QRect(10, 83, 51, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_29.sizePolicy().hasHeightForWidth())
        self.label_29.setSizePolicy(sizePolicy)
        self.label_29.setObjectName(_fromUtf8("label_29"))
        self.lineEdit_rendering_model_longitude = QtGui.QLineEdit(self.groupBox_5)
        self.lineEdit_rendering_model_longitude.setEnabled(False)
        self.lineEdit_rendering_model_longitude.setGeometry(QtCore.QRect(63, 41, 71, 20))
        self.lineEdit_rendering_model_longitude.setObjectName(_fromUtf8("lineEdit_rendering_model_longitude"))
        self.lineEdit_rendering_model_latitude = QtGui.QLineEdit(self.groupBox_5)
        self.lineEdit_rendering_model_latitude.setEnabled(False)
        self.lineEdit_rendering_model_latitude.setGeometry(QtCore.QRect(63, 62, 71, 20))
        self.lineEdit_rendering_model_latitude.setObjectName(_fromUtf8("lineEdit_rendering_model_latitude"))
        self.lineEdit_rendering_model_altitude = QtGui.QLineEdit(self.groupBox_5)
        self.lineEdit_rendering_model_altitude.setEnabled(False)
        self.lineEdit_rendering_model_altitude.setGeometry(QtCore.QRect(63, 83, 71, 20))
        self.lineEdit_rendering_model_altitude.setObjectName(_fromUtf8("lineEdit_rendering_model_altitude"))
        self.lineEdit_rendering_model_scale = QtGui.QLineEdit(self.groupBox_5)
        self.lineEdit_rendering_model_scale.setEnabled(False)
        self.lineEdit_rendering_model_scale.setGeometry(QtCore.QRect(63, 104, 101, 20))
        self.lineEdit_rendering_model_scale.setObjectName(_fromUtf8("lineEdit_rendering_model_scale"))
        self.label_30 = QtGui.QLabel(self.groupBox_5)
        self.label_30.setGeometry(QtCore.QRect(10, 104, 51, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_30.sizePolicy().hasHeightForWidth())
        self.label_30.setSizePolicy(sizePolicy)
        self.label_30.setObjectName(_fromUtf8("label_30"))
        self.pushButton_rendering_model_apply = QtGui.QPushButton(self.groupBox_5)
        self.pushButton_rendering_model_apply.setEnabled(False)
        self.pushButton_rendering_model_apply.setGeometry(QtCore.QRect(63, 140, 61, 23))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_rendering_model_apply.sizePolicy().hasHeightForWidth())
        self.pushButton_rendering_model_apply.setSizePolicy(sizePolicy)
        self.pushButton_rendering_model_apply.setIcon(icon7)
        self.pushButton_rendering_model_apply.setObjectName(_fromUtf8("pushButton_rendering_model_apply"))
        self.pushButton_rendering_model_file = QtGui.QPushButton(self.groupBox_5)
        self.pushButton_rendering_model_file.setEnabled(False)
        self.pushButton_rendering_model_file.setGeometry(QtCore.QRect(140, 20, 20, 20))
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(_fromUtf8(":/plugins/milkmachine/folder.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_rendering_model_file.setIcon(icon8)
        self.pushButton_rendering_model_file.setObjectName(_fromUtf8("pushButton_rendering_model_file"))
        self.pushButton_rendering_model_xy = QtGui.QPushButton(self.groupBox_5)
        self.pushButton_rendering_model_xy.setEnabled(False)
        self.pushButton_rendering_model_xy.setGeometry(QtCore.QRect(140, 50, 20, 20))
        font = QtGui.QFont()
        font.setPointSize(6)
        self.pushButton_rendering_model_xy.setFont(font)
        self.pushButton_rendering_model_xy.setObjectName(_fromUtf8("pushButton_rendering_model_xy"))
        self.checkBox_rendering_model_z = QtGui.QCheckBox(self.groupBox_5)
        self.checkBox_rendering_model_z.setEnabled(False)
        self.checkBox_rendering_model_z.setGeometry(QtCore.QRect(140, 83, 31, 20))
        self.checkBox_rendering_model_z.setChecked(True)
        self.checkBox_rendering_model_z.setObjectName(_fromUtf8("checkBox_rendering_model_z"))
        self.tabWidget.addTab(self.tab_rendering, _fromUtf8(""))
        self.tab_visualization = QtGui.QWidget()
        self.tab_visualization.setObjectName(_fromUtf8("tab_visualization"))
        self.label_visualization_active = QtGui.QLabel(self.tab_visualization)
        self.label_visualization_active.setGeometry(QtCore.QRect(20, 20, 81, 16))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_visualization_active.sizePolicy().hasHeightForWidth())
        self.label_visualization_active.setSizePolicy(sizePolicy)
        self.label_visualization_active.setObjectName(_fromUtf8("label_visualization_active"))
        self.lineEdit_visualization_active = QtGui.QLineEdit(self.tab_visualization)
        self.lineEdit_visualization_active.setEnabled(False)
        self.lineEdit_visualization_active.setGeometry(QtCore.QRect(90, 18, 131, 20))
        self.lineEdit_visualization_active.setObjectName(_fromUtf8("lineEdit_visualization_active"))
        self.checkBox_visualization_edit = QtGui.QCheckBox(self.tab_visualization)
        self.checkBox_visualization_edit.setEnabled(False)
        self.checkBox_visualization_edit.setGeometry(QtCore.QRect(240, 21, 111, 16))
        self.checkBox_visualization_edit.setObjectName(_fromUtf8("checkBox_visualization_edit"))
        self.groupBox = QtGui.QGroupBox(self.tab_visualization)
        self.groupBox.setGeometry(QtCore.QRect(230, 50, 321, 71))
        self.groupBox.setObjectName(_fromUtf8("groupBox"))
        self.label_14 = QtGui.QLabel(self.groupBox)
        self.label_14.setGeometry(QtCore.QRect(10, 20, 61, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_14.sizePolicy().hasHeightForWidth())
        self.label_14.setSizePolicy(sizePolicy)
        self.label_14.setObjectName(_fromUtf8("label_14"))
        self.label_15 = QtGui.QLabel(self.groupBox)
        self.label_15.setGeometry(QtCore.QRect(10, 41, 51, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_15.sizePolicy().hasHeightForWidth())
        self.label_15.setSizePolicy(sizePolicy)
        self.label_15.setObjectName(_fromUtf8("label_15"))
        self.comboBox_flyto_mode = QtGui.QComboBox(self.groupBox)
        self.comboBox_flyto_mode.setEnabled(False)
        self.comboBox_flyto_mode.setGeometry(QtCore.QRect(80, 20, 91, 20))
        self.comboBox_flyto_mode.setObjectName(_fromUtf8("comboBox_flyto_mode"))
        self.lineEdit_flyto_duration = QtGui.QLineEdit(self.groupBox)
        self.lineEdit_flyto_duration.setEnabled(False)
        self.lineEdit_flyto_duration.setGeometry(QtCore.QRect(80, 41, 91, 20))
        self.lineEdit_flyto_duration.setText(_fromUtf8(""))
        self.lineEdit_flyto_duration.setPlaceholderText(_fromUtf8(""))
        self.lineEdit_flyto_duration.setObjectName(_fromUtf8("lineEdit_flyto_duration"))
        self.checkBox_flyto_duration = QtGui.QCheckBox(self.groupBox)
        self.checkBox_flyto_duration.setGeometry(QtCore.QRect(190, 41, 131, 20))
        self.checkBox_flyto_duration.setChecked(True)
        self.checkBox_flyto_duration.setObjectName(_fromUtf8("checkBox_flyto_duration"))
        self.groupBox_cameraview = QtGui.QGroupBox(self.tab_visualization)
        self.groupBox_cameraview.setGeometry(QtCore.QRect(4, 120, 311, 301))
        self.groupBox_cameraview.setObjectName(_fromUtf8("groupBox_cameraview"))
        self.tabWidget_2 = QtGui.QTabWidget(self.groupBox_cameraview)
        self.tabWidget_2.setGeometry(QtCore.QRect(7, 20, 301, 271))
        self.tabWidget_2.setObjectName(_fromUtf8("tabWidget_2"))
        self.tab_4 = QtGui.QWidget()
        self.tab_4.setObjectName(_fromUtf8("tab_4"))
        self.pushButton_visualization_camera_xy = QtGui.QPushButton(self.tab_4)
        self.pushButton_visualization_camera_xy.setEnabled(False)
        self.pushButton_visualization_camera_xy.setGeometry(QtCore.QRect(260, 30, 20, 20))
        font = QtGui.QFont()
        font.setPointSize(6)
        self.pushButton_visualization_camera_xy.setFont(font)
        self.pushButton_visualization_camera_xy.setObjectName(_fromUtf8("pushButton_visualization_camera_xy"))
        self.label_10 = QtGui.QLabel(self.tab_4)
        self.label_10.setGeometry(QtCore.QRect(20, 186, 91, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_10.sizePolicy().hasHeightForWidth())
        self.label_10.setSizePolicy(sizePolicy)
        self.label_10.setObjectName(_fromUtf8("label_10"))
        self.lineEdit_visualization_camera_longitude = QtGui.QLineEdit(self.tab_4)
        self.lineEdit_visualization_camera_longitude.setEnabled(False)
        self.lineEdit_visualization_camera_longitude.setGeometry(QtCore.QRect(110, 18, 77, 20))
        self.lineEdit_visualization_camera_longitude.setObjectName(_fromUtf8("lineEdit_visualization_camera_longitude"))
        self.lineEdit_visualization_camera_latitude_off = QtGui.QLineEdit(self.tab_4)
        self.lineEdit_visualization_camera_latitude_off.setEnabled(False)
        self.lineEdit_visualization_camera_latitude_off.setGeometry(QtCore.QRect(220, 39, 31, 20))
        self.lineEdit_visualization_camera_latitude_off.setObjectName(_fromUtf8("lineEdit_visualization_camera_latitude_off"))
        self.label_32 = QtGui.QLabel(self.tab_4)
        self.label_32.setGeometry(QtCore.QRect(200, 39, 20, 20))
        self.label_32.setObjectName(_fromUtf8("label_32"))
        self.lineEdit__visualization_camera_heading = QtGui.QLineEdit(self.tab_4)
        self.lineEdit__visualization_camera_heading.setEnabled(False)
        self.lineEdit__visualization_camera_heading.setGeometry(QtCore.QRect(110, 144, 101, 20))
        self.lineEdit__visualization_camera_heading.setObjectName(_fromUtf8("lineEdit__visualization_camera_heading"))
        self.label_6 = QtGui.QLabel(self.tab_4)
        self.label_6.setGeometry(QtCore.QRect(20, 102, 91, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        self.label_6.setObjectName(_fromUtf8("label_6"))
        self.label_12 = QtGui.QLabel(self.tab_4)
        self.label_12.setGeometry(QtCore.QRect(20, 18, 81, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_12.sizePolicy().hasHeightForWidth())
        self.label_12.setSizePolicy(sizePolicy)
        self.label_12.setObjectName(_fromUtf8("label_12"))
        self.lineEdit__visualization_camera_roll = QtGui.QLineEdit(self.tab_4)
        self.lineEdit__visualization_camera_roll.setEnabled(False)
        self.lineEdit__visualization_camera_roll.setGeometry(QtCore.QRect(110, 165, 101, 20))
        self.lineEdit__visualization_camera_roll.setObjectName(_fromUtf8("lineEdit__visualization_camera_roll"))
        self.label_11 = QtGui.QLabel(self.tab_4)
        self.label_11.setGeometry(QtCore.QRect(20, 39, 81, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_11.sizePolicy().hasHeightForWidth())
        self.label_11.setSizePolicy(sizePolicy)
        self.label_11.setObjectName(_fromUtf8("label_11"))
        self.label_31 = QtGui.QLabel(self.tab_4)
        self.label_31.setGeometry(QtCore.QRect(200, 20, 20, 20))
        self.label_31.setObjectName(_fromUtf8("label_31"))
        self.lineEdit_visualization_camera_longitude_off = QtGui.QLineEdit(self.tab_4)
        self.lineEdit_visualization_camera_longitude_off.setEnabled(False)
        self.lineEdit_visualization_camera_longitude_off.setGeometry(QtCore.QRect(220, 18, 31, 20))
        self.lineEdit_visualization_camera_longitude_off.setObjectName(_fromUtf8("lineEdit_visualization_camera_longitude_off"))
        self.label_7 = QtGui.QLabel(self.tab_4)
        self.label_7.setGeometry(QtCore.QRect(20, 123, 91, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_7.sizePolicy().hasHeightForWidth())
        self.label_7.setSizePolicy(sizePolicy)
        self.label_7.setObjectName(_fromUtf8("label_7"))
        self.label_4 = QtGui.QLabel(self.tab_4)
        self.label_4.setGeometry(QtCore.QRect(20, 60, 81, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        self.label_4.setObjectName(_fromUtf8("label_4"))
        self.label_8 = QtGui.QLabel(self.tab_4)
        self.label_8.setGeometry(QtCore.QRect(20, 144, 91, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_8.sizePolicy().hasHeightForWidth())
        self.label_8.setSizePolicy(sizePolicy)
        self.label_8.setObjectName(_fromUtf8("label_8"))
        self.label_5 = QtGui.QLabel(self.tab_4)
        self.label_5.setGeometry(QtCore.QRect(20, 81, 91, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_5.sizePolicy().hasHeightForWidth())
        self.label_5.setSizePolicy(sizePolicy)
        self.label_5.setObjectName(_fromUtf8("label_5"))
        self.comboBox_gxaltitudemode = QtGui.QComboBox(self.tab_4)
        self.comboBox_gxaltitudemode.setEnabled(False)
        self.comboBox_gxaltitudemode.setGeometry(QtCore.QRect(110, 102, 101, 20))
        self.comboBox_gxaltitudemode.setObjectName(_fromUtf8("comboBox_gxaltitudemode"))
        self.lineEdit__visualization_camera_tilt = QtGui.QLineEdit(self.tab_4)
        self.lineEdit__visualization_camera_tilt.setEnabled(False)
        self.lineEdit__visualization_camera_tilt.setGeometry(QtCore.QRect(110, 186, 101, 20))
        self.lineEdit__visualization_camera_tilt.setObjectName(_fromUtf8("lineEdit__visualization_camera_tilt"))
        self.lineEdit_visualization_camera_latitude = QtGui.QLineEdit(self.tab_4)
        self.lineEdit_visualization_camera_latitude.setEnabled(False)
        self.lineEdit_visualization_camera_latitude.setGeometry(QtCore.QRect(110, 39, 77, 20))
        self.lineEdit_visualization_camera_latitude.setObjectName(_fromUtf8("lineEdit_visualization_camera_latitude"))
        self.lineEdit_visualization_camera_altitude = QtGui.QLineEdit(self.tab_4)
        self.lineEdit_visualization_camera_altitude.setEnabled(False)
        self.lineEdit_visualization_camera_altitude.setGeometry(QtCore.QRect(110, 60, 101, 20))
        self.lineEdit_visualization_camera_altitude.setObjectName(_fromUtf8("lineEdit_visualization_camera_altitude"))
        self.lineEdit__visualization_camera_gxhoriz = QtGui.QLineEdit(self.tab_4)
        self.lineEdit__visualization_camera_gxhoriz.setEnabled(False)
        self.lineEdit__visualization_camera_gxhoriz.setGeometry(QtCore.QRect(110, 123, 101, 20))
        self.lineEdit__visualization_camera_gxhoriz.setObjectName(_fromUtf8("lineEdit__visualization_camera_gxhoriz"))
        self.label_9 = QtGui.QLabel(self.tab_4)
        self.label_9.setGeometry(QtCore.QRect(20, 165, 91, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_9.sizePolicy().hasHeightForWidth())
        self.label_9.setSizePolicy(sizePolicy)
        self.label_9.setObjectName(_fromUtf8("label_9"))
        self.comboBox_altitudemode = QtGui.QComboBox(self.tab_4)
        self.comboBox_altitudemode.setEnabled(False)
        self.comboBox_altitudemode.setGeometry(QtCore.QRect(110, 81, 101, 20))
        self.comboBox_altitudemode.setObjectName(_fromUtf8("comboBox_altitudemode"))
        self.pushButton_camera_apply = QtGui.QPushButton(self.tab_4)
        self.pushButton_camera_apply.setEnabled(False)
        self.pushButton_camera_apply.setGeometry(QtCore.QRect(110, 215, 61, 23))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_camera_apply.sizePolicy().hasHeightForWidth())
        self.pushButton_camera_apply.setSizePolicy(sizePolicy)
        self.pushButton_camera_apply.setIcon(icon7)
        self.pushButton_camera_apply.setObjectName(_fromUtf8("pushButton_camera_apply"))
        self.tabWidget_2.addTab(self.tab_4, _fromUtf8(""))
        self.tab_5 = QtGui.QWidget()
        self.tab_5.setObjectName(_fromUtf8("tab_5"))
        self.lineEdit__visualization_follow_range = QtGui.QLineEdit(self.tab_5)
        self.lineEdit__visualization_follow_range.setEnabled(False)
        self.lineEdit__visualization_follow_range.setGeometry(QtCore.QRect(120, 102, 101, 20))
        self.lineEdit__visualization_follow_range.setObjectName(_fromUtf8("lineEdit__visualization_follow_range"))
        self.lineEdit__visualization_follow_tilt = QtGui.QLineEdit(self.tab_5)
        self.lineEdit__visualization_follow_tilt.setEnabled(False)
        self.lineEdit__visualization_follow_tilt.setGeometry(QtCore.QRect(120, 123, 101, 20))
        self.lineEdit__visualization_follow_tilt.setObjectName(_fromUtf8("lineEdit__visualization_follow_tilt"))
        self.label_37 = QtGui.QLabel(self.tab_5)
        self.label_37.setGeometry(QtCore.QRect(20, 18, 61, 20))
        self.label_37.setObjectName(_fromUtf8("label_37"))
        self.label_39 = QtGui.QLabel(self.tab_5)
        self.label_39.setGeometry(QtCore.QRect(20, 102, 41, 20))
        self.label_39.setObjectName(_fromUtf8("label_39"))
        self.lineEdit__visualization_follow_gxhoriz = QtGui.QLineEdit(self.tab_5)
        self.lineEdit__visualization_follow_gxhoriz.setEnabled(False)
        self.lineEdit__visualization_follow_gxhoriz.setGeometry(QtCore.QRect(120, 81, 101, 20))
        self.lineEdit__visualization_follow_gxhoriz.setObjectName(_fromUtf8("lineEdit__visualization_follow_gxhoriz"))
        self.comboBox_follow_altitudemode = QtGui.QComboBox(self.tab_5)
        self.comboBox_follow_altitudemode.setEnabled(False)
        self.comboBox_follow_altitudemode.setGeometry(QtCore.QRect(120, 39, 101, 20))
        self.comboBox_follow_altitudemode.setObjectName(_fromUtf8("comboBox_follow_altitudemode"))
        self.label_34 = QtGui.QLabel(self.tab_5)
        self.label_34.setGeometry(QtCore.QRect(20, 60, 91, 20))
        self.label_34.setObjectName(_fromUtf8("label_34"))
        self.label_38 = QtGui.QLabel(self.tab_5)
        self.label_38.setGeometry(QtCore.QRect(20, 123, 41, 20))
        self.label_38.setObjectName(_fromUtf8("label_38"))
        self.label_35 = QtGui.QLabel(self.tab_5)
        self.label_35.setGeometry(QtCore.QRect(20, 81, 61, 20))
        self.label_35.setObjectName(_fromUtf8("label_35"))
        self.comboBox_follow_gxaltitudemode = QtGui.QComboBox(self.tab_5)
        self.comboBox_follow_gxaltitudemode.setEnabled(False)
        self.comboBox_follow_gxaltitudemode.setGeometry(QtCore.QRect(120, 60, 101, 20))
        self.comboBox_follow_gxaltitudemode.setObjectName(_fromUtf8("comboBox_follow_gxaltitudemode"))
        self.lineEdit_visualization_follow_altitude = QtGui.QLineEdit(self.tab_5)
        self.lineEdit_visualization_follow_altitude.setEnabled(False)
        self.lineEdit_visualization_follow_altitude.setGeometry(QtCore.QRect(120, 18, 101, 20))
        self.lineEdit_visualization_follow_altitude.setObjectName(_fromUtf8("lineEdit_visualization_follow_altitude"))
        self.label_36 = QtGui.QLabel(self.tab_5)
        self.label_36.setGeometry(QtCore.QRect(20, 39, 81, 20))
        self.label_36.setObjectName(_fromUtf8("label_36"))
        self.pushButton_follow_apply = QtGui.QPushButton(self.tab_5)
        self.pushButton_follow_apply.setEnabled(False)
        self.pushButton_follow_apply.setGeometry(QtCore.QRect(110, 215, 61, 23))
        self.pushButton_follow_apply.setIcon(icon7)
        self.pushButton_follow_apply.setObjectName(_fromUtf8("pushButton_follow_apply"))
        self.label_40 = QtGui.QLabel(self.tab_5)
        self.label_40.setGeometry(QtCore.QRect(20, 165, 61, 20))
        self.label_40.setObjectName(_fromUtf8("label_40"))
        self.lineEdit__visualization_follow_smoother = QtGui.QLineEdit(self.tab_5)
        self.lineEdit__visualization_follow_smoother.setEnabled(False)
        self.lineEdit__visualization_follow_smoother.setGeometry(QtCore.QRect(120, 165, 101, 20))
        self.lineEdit__visualization_follow_smoother.setObjectName(_fromUtf8("lineEdit__visualization_follow_smoother"))
        self.label_41 = QtGui.QLabel(self.tab_5)
        self.label_41.setGeometry(QtCore.QRect(20, 144, 71, 20))
        self.label_41.setObjectName(_fromUtf8("label_41"))
        self.lineEdit__visualization_follow_follow_angle = QtGui.QLineEdit(self.tab_5)
        self.lineEdit__visualization_follow_follow_angle.setEnabled(False)
        self.lineEdit__visualization_follow_follow_angle.setGeometry(QtCore.QRect(120, 144, 101, 20))
        self.lineEdit__visualization_follow_follow_angle.setObjectName(_fromUtf8("lineEdit__visualization_follow_follow_angle"))
        self.label_67 = QtGui.QLabel(self.tab_5)
        self.label_67.setGeometry(QtCore.QRect(20, 186, 101, 20))
        self.label_67.setObjectName(_fromUtf8("label_67"))
        self.lineEdit__visualization_follow_hoffset = QtGui.QLineEdit(self.tab_5)
        self.lineEdit__visualization_follow_hoffset.setEnabled(False)
        self.lineEdit__visualization_follow_hoffset.setGeometry(QtCore.QRect(120, 186, 101, 20))
        self.lineEdit__visualization_follow_hoffset.setObjectName(_fromUtf8("lineEdit__visualization_follow_hoffset"))
        self.tabWidget_2.addTab(self.tab_5, _fromUtf8(""))
        self.tab_8 = QtGui.QWidget()
        self.tab_8.setObjectName(_fromUtf8("tab_8"))
        self.pushButton_visualization_camera_symbolize = QtGui.QPushButton(self.tab_8)
        self.pushButton_visualization_camera_symbolize.setEnabled(False)
        self.pushButton_visualization_camera_symbolize.setGeometry(QtCore.QRect(30, 10, 75, 23))
        self.pushButton_visualization_camera_symbolize.setObjectName(_fromUtf8("pushButton_visualization_camera_symbolize"))
        self.chkActivate = QtGui.QCheckBox(self.tab_8)
        self.chkActivate.setEnabled(True)
        self.chkActivate.setGeometry(QtCore.QRect(30, 50, 201, 31))
        self.chkActivate.setObjectName(_fromUtf8("chkActivate"))
        self.txtFeedback = QtGui.QTextEdit(self.tab_8)
        self.txtFeedback.setEnabled(True)
        self.txtFeedback.setGeometry(QtCore.QRect(30, 80, 151, 151))
        self.txtFeedback.setObjectName(_fromUtf8("txtFeedback"))
        self.line = QtGui.QFrame(self.tab_8)
        self.line.setGeometry(QtCore.QRect(20, 40, 251, 16))
        self.line.setFrameShape(QtGui.QFrame.HLine)
        self.line.setFrameShadow(QtGui.QFrame.Sunken)
        self.line.setObjectName(_fromUtf8("line"))
        self.pushButton_visualization_camera_tofollow = QtGui.QPushButton(self.tab_8)
        self.pushButton_visualization_camera_tofollow.setEnabled(False)
        self.pushButton_visualization_camera_tofollow.setGeometry(QtCore.QRect(190, 180, 75, 23))
        self.pushButton_visualization_camera_tofollow.setObjectName(_fromUtf8("pushButton_visualization_camera_tofollow"))
        self.pushButton_visualization_camera_tocustom = QtGui.QPushButton(self.tab_8)
        self.pushButton_visualization_camera_tocustom.setEnabled(False)
        self.pushButton_visualization_camera_tocustom.setGeometry(QtCore.QRect(190, 210, 75, 23))
        self.pushButton_visualization_camera_tocustom.setObjectName(_fromUtf8("pushButton_visualization_camera_tocustom"))
        self.tabWidget_2.addTab(self.tab_8, _fromUtf8(""))
        self.label_13 = QtGui.QLabel(self.tab_visualization)
        self.label_13.setGeometry(QtCore.QRect(20, 70, 61, 20))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_13.sizePolicy().hasHeightForWidth())
        self.label_13.setSizePolicy(sizePolicy)
        self.label_13.setObjectName(_fromUtf8("label_13"))
        self.lineEdit_tourname = QtGui.QLineEdit(self.tab_visualization)
        self.lineEdit_tourname.setEnabled(False)
        self.lineEdit_tourname.setGeometry(QtCore.QRect(90, 70, 91, 20))
        self.lineEdit_tourname.setObjectName(_fromUtf8("lineEdit_tourname"))
        self.groupBox_cameraview_2 = QtGui.QGroupBox(self.tab_visualization)
        self.groupBox_cameraview_2.setGeometry(QtCore.QRect(320, 120, 311, 301))
        self.groupBox_cameraview_2.setObjectName(_fromUtf8("groupBox_cameraview_2"))
        self.tabWidget_3 = QtGui.QTabWidget(self.groupBox_cameraview_2)
        self.tabWidget_3.setEnabled(True)
        self.tabWidget_3.setGeometry(QtCore.QRect(7, 20, 301, 271))
        self.tabWidget_3.setObjectName(_fromUtf8("tabWidget_3"))
        self.tab_6 = QtGui.QWidget()
        self.tab_6.setObjectName(_fromUtf8("tab_6"))
        self.label_42 = QtGui.QLabel(self.tab_6)
        self.label_42.setGeometry(QtCore.QRect(20, 123, 91, 20))
        self.label_42.setObjectName(_fromUtf8("label_42"))
        self.lineEdit__visualization_lookat_heading = QtGui.QLineEdit(self.tab_6)
        self.lineEdit__visualization_lookat_heading.setEnabled(False)
        self.lineEdit__visualization_lookat_heading.setGeometry(QtCore.QRect(120, 102, 101, 20))
        self.lineEdit__visualization_lookat_heading.setObjectName(_fromUtf8("lineEdit__visualization_lookat_heading"))
        self.label_44 = QtGui.QLabel(self.tab_6)
        self.label_44.setGeometry(QtCore.QRect(20, 60, 91, 20))
        self.label_44.setObjectName(_fromUtf8("label_44"))
        self.label_49 = QtGui.QLabel(self.tab_6)
        self.label_49.setGeometry(QtCore.QRect(20, 18, 81, 20))
        self.label_49.setObjectName(_fromUtf8("label_49"))
        self.label_50 = QtGui.QLabel(self.tab_6)
        self.label_50.setGeometry(QtCore.QRect(20, 102, 91, 20))
        self.label_50.setObjectName(_fromUtf8("label_50"))
        self.label_51 = QtGui.QLabel(self.tab_6)
        self.label_51.setGeometry(QtCore.QRect(20, 39, 91, 20))
        self.label_51.setObjectName(_fromUtf8("label_51"))
        self.comboBox_lookat_gxaltitudemode = QtGui.QComboBox(self.tab_6)
        self.comboBox_lookat_gxaltitudemode.setEnabled(False)
        self.comboBox_lookat_gxaltitudemode.setGeometry(QtCore.QRect(120, 60, 101, 20))
        self.comboBox_lookat_gxaltitudemode.setObjectName(_fromUtf8("comboBox_lookat_gxaltitudemode"))
        self.lineEdit__visualization_lookat_tilt = QtGui.QLineEdit(self.tab_6)
        self.lineEdit__visualization_lookat_tilt.setEnabled(False)
        self.lineEdit__visualization_lookat_tilt.setGeometry(QtCore.QRect(120, 123, 101, 20))
        self.lineEdit__visualization_lookat_tilt.setObjectName(_fromUtf8("lineEdit__visualization_lookat_tilt"))
        self.lineEdit_visualization_lookat_altitude = QtGui.QLineEdit(self.tab_6)
        self.lineEdit_visualization_lookat_altitude.setEnabled(False)
        self.lineEdit_visualization_lookat_altitude.setGeometry(QtCore.QRect(120, 18, 101, 20))
        self.lineEdit_visualization_lookat_altitude.setObjectName(_fromUtf8("lineEdit_visualization_lookat_altitude"))
        self.comboBox_lookat_altitudemode = QtGui.QComboBox(self.tab_6)
        self.comboBox_lookat_altitudemode.setEnabled(False)
        self.comboBox_lookat_altitudemode.setGeometry(QtCore.QRect(120, 39, 101, 20))
        self.comboBox_lookat_altitudemode.setObjectName(_fromUtf8("comboBox_lookat_altitudemode"))
        self.pushButton_lookat_apply = QtGui.QPushButton(self.tab_6)
        self.pushButton_lookat_apply.setEnabled(False)
        self.pushButton_lookat_apply.setGeometry(QtCore.QRect(120, 215, 61, 23))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_lookat_apply.sizePolicy().hasHeightForWidth())
        self.pushButton_lookat_apply.setSizePolicy(sizePolicy)
        self.pushButton_lookat_apply.setIcon(icon7)
        self.pushButton_lookat_apply.setObjectName(_fromUtf8("pushButton_lookat_apply"))
        self.label_57 = QtGui.QLabel(self.tab_6)
        self.label_57.setGeometry(QtCore.QRect(20, 81, 41, 20))
        self.label_57.setObjectName(_fromUtf8("label_57"))
        self.lineEdit__visualization_lookat_range = QtGui.QLineEdit(self.tab_6)
        self.lineEdit__visualization_lookat_range.setEnabled(False)
        self.lineEdit__visualization_lookat_range.setGeometry(QtCore.QRect(120, 81, 101, 20))
        self.lineEdit__visualization_lookat_range.setObjectName(_fromUtf8("lineEdit__visualization_lookat_range"))
        self.tabWidget_3.addTab(self.tab_6, _fromUtf8(""))
        self.tab_7 = QtGui.QWidget()
        self.tab_7.setObjectName(_fromUtf8("tab_7"))
        self.lineEdit__visualization_circle_range = QtGui.QLineEdit(self.tab_7)
        self.lineEdit__visualization_circle_range.setEnabled(False)
        self.lineEdit__visualization_circle_range.setGeometry(QtCore.QRect(127, 102, 101, 20))
        self.lineEdit__visualization_circle_range.setObjectName(_fromUtf8("lineEdit__visualization_circle_range"))
        self.lineEdit__visualization_circle_tilt = QtGui.QLineEdit(self.tab_7)
        self.lineEdit__visualization_circle_tilt.setEnabled(False)
        self.lineEdit__visualization_circle_tilt.setGeometry(QtCore.QRect(127, 81, 101, 20))
        self.lineEdit__visualization_circle_tilt.setObjectName(_fromUtf8("lineEdit__visualization_circle_tilt"))
        self.label_53 = QtGui.QLabel(self.tab_7)
        self.label_53.setGeometry(QtCore.QRect(20, 18, 61, 20))
        self.label_53.setObjectName(_fromUtf8("label_53"))
        self.label_54 = QtGui.QLabel(self.tab_7)
        self.label_54.setGeometry(QtCore.QRect(20, 102, 41, 20))
        self.label_54.setObjectName(_fromUtf8("label_54"))
        self.comboBox_circle_altitudemode = QtGui.QComboBox(self.tab_7)
        self.comboBox_circle_altitudemode.setEnabled(False)
        self.comboBox_circle_altitudemode.setGeometry(QtCore.QRect(127, 39, 101, 20))
        self.comboBox_circle_altitudemode.setObjectName(_fromUtf8("comboBox_circle_altitudemode"))
        self.label_55 = QtGui.QLabel(self.tab_7)
        self.label_55.setGeometry(QtCore.QRect(20, 60, 91, 20))
        self.label_55.setObjectName(_fromUtf8("label_55"))
        self.label_56 = QtGui.QLabel(self.tab_7)
        self.label_56.setGeometry(QtCore.QRect(20, 81, 41, 20))
        self.label_56.setObjectName(_fromUtf8("label_56"))
        self.comboBox_circle_gxaltitudemode = QtGui.QComboBox(self.tab_7)
        self.comboBox_circle_gxaltitudemode.setEnabled(False)
        self.comboBox_circle_gxaltitudemode.setGeometry(QtCore.QRect(127, 60, 101, 20))
        self.comboBox_circle_gxaltitudemode.setObjectName(_fromUtf8("comboBox_circle_gxaltitudemode"))
        self.lineEdit_visualization_circle_altitude = QtGui.QLineEdit(self.tab_7)
        self.lineEdit_visualization_circle_altitude.setEnabled(False)
        self.lineEdit_visualization_circle_altitude.setGeometry(QtCore.QRect(127, 18, 101, 20))
        self.lineEdit_visualization_circle_altitude.setObjectName(_fromUtf8("lineEdit_visualization_circle_altitude"))
        self.label_58 = QtGui.QLabel(self.tab_7)
        self.label_58.setGeometry(QtCore.QRect(20, 39, 81, 20))
        self.label_58.setObjectName(_fromUtf8("label_58"))
        self.pushButton_circle_apply = QtGui.QPushButton(self.tab_7)
        self.pushButton_circle_apply.setEnabled(False)
        self.pushButton_circle_apply.setGeometry(QtCore.QRect(130, 215, 61, 23))
        self.pushButton_circle_apply.setIcon(icon7)
        self.pushButton_circle_apply.setObjectName(_fromUtf8("pushButton_circle_apply"))
        self.label_59 = QtGui.QLabel(self.tab_7)
        self.label_59.setGeometry(QtCore.QRect(20, 144, 81, 20))
        self.label_59.setObjectName(_fromUtf8("label_59"))
        self.lineEdit__visualization_circle_start_heading = QtGui.QLineEdit(self.tab_7)
        self.lineEdit__visualization_circle_start_heading.setEnabled(False)
        self.lineEdit__visualization_circle_start_heading.setGeometry(QtCore.QRect(127, 144, 101, 20))
        self.lineEdit__visualization_circle_start_heading.setObjectName(_fromUtf8("lineEdit__visualization_circle_start_heading"))
        self.label_60 = QtGui.QLabel(self.tab_7)
        self.label_60.setGeometry(QtCore.QRect(20, 123, 71, 20))
        self.label_60.setObjectName(_fromUtf8("label_60"))
        self.lineEdit__visualization_circle_duration = QtGui.QLineEdit(self.tab_7)
        self.lineEdit__visualization_circle_duration.setEnabled(False)
        self.lineEdit__visualization_circle_duration.setGeometry(QtCore.QRect(127, 123, 101, 20))
        self.lineEdit__visualization_circle_duration.setObjectName(_fromUtf8("lineEdit__visualization_circle_duration"))
        self.lineEdit__visualization_circle_rotations = QtGui.QLineEdit(self.tab_7)
        self.lineEdit__visualization_circle_rotations.setEnabled(False)
        self.lineEdit__visualization_circle_rotations.setGeometry(QtCore.QRect(127, 165, 101, 20))
        self.lineEdit__visualization_circle_rotations.setObjectName(_fromUtf8("lineEdit__visualization_circle_rotations"))
        self.label_61 = QtGui.QLabel(self.tab_7)
        self.label_61.setGeometry(QtCore.QRect(20, 165, 101, 20))
        self.label_61.setObjectName(_fromUtf8("label_61"))
        self.label_62 = QtGui.QLabel(self.tab_7)
        self.label_62.setGeometry(QtCore.QRect(20, 190, 101, 20))
        self.label_62.setObjectName(_fromUtf8("label_62"))
        self.comboBox_visualization_direction = QtGui.QComboBox(self.tab_7)
        self.comboBox_visualization_direction.setEnabled(False)
        self.comboBox_visualization_direction.setGeometry(QtCore.QRect(127, 190, 101, 20))
        self.comboBox_visualization_direction.setObjectName(_fromUtf8("comboBox_visualization_direction"))
        self.tabWidget_3.addTab(self.tab_7, _fromUtf8(""))
        self.checkBox_visualization_streetview = QtGui.QCheckBox(self.tab_visualization)
        self.checkBox_visualization_streetview.setEnabled(False)
        self.checkBox_visualization_streetview.setGeometry(QtCore.QRect(70, 100, 121, 17))
        self.checkBox_visualization_streetview.setObjectName(_fromUtf8("checkBox_visualization_streetview"))
        self.tabWidget.addTab(self.tab_visualization, _fromUtf8(""))
        self.tab_export = QtGui.QWidget()
        self.tab_export.setObjectName(_fromUtf8("tab_export"))
        self.buttonExportTrack = QtGui.QPushButton(self.tab_export)
        self.buttonExportTrack.setEnabled(False)
        self.buttonExportTrack.setGeometry(QtCore.QRect(90, 90, 101, 30))
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(_fromUtf8(":/plugins/milkmachine/Export.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.buttonExportTrack.setIcon(icon9)
        self.buttonExportTrack.setObjectName(_fromUtf8("buttonExportTrack"))
        self.pushButton_TrackInfo = QtGui.QPushButton(self.tab_export)
        self.pushButton_TrackInfo.setEnabled(False)
        self.pushButton_TrackInfo.setGeometry(QtCore.QRect(200, 90, 31, 30))
        self.pushButton_TrackInfo.setText(_fromUtf8(""))
        self.pushButton_TrackInfo.setIcon(icon)
        self.pushButton_TrackInfo.setIconSize(QtCore.QSize(24, 24))
        self.pushButton_TrackInfo.setObjectName(_fromUtf8("pushButton_TrackInfo"))
        self.pushButton_google_earth = QtGui.QPushButton(self.tab_export)
        self.pushButton_google_earth.setEnabled(False)
        self.pushButton_google_earth.setGeometry(QtCore.QRect(240, 90, 31, 30))
        self.pushButton_google_earth.setText(_fromUtf8(""))
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(_fromUtf8(":/plugins/milkmachine/earth.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_google_earth.setIcon(icon10)
        self.pushButton_google_earth.setIconSize(QtCore.QSize(36, 36))
        self.pushButton_google_earth.setObjectName(_fromUtf8("pushButton_google_earth"))
        self.label_visualization_active_2 = QtGui.QLabel(self.tab_export)
        self.label_visualization_active_2.setGeometry(QtCore.QRect(20, 20, 81, 16))
        self.label_visualization_active_2.setObjectName(_fromUtf8("label_visualization_active_2"))
        self.lineEdit_export_active = QtGui.QLineEdit(self.tab_export)
        self.lineEdit_export_active.setEnabled(False)
        self.lineEdit_export_active.setGeometry(QtCore.QRect(90, 18, 131, 20))
        self.lineEdit_export_active.setObjectName(_fromUtf8("lineEdit_export_active"))
        self.pushButton_export_audio_file = QtGui.QPushButton(self.tab_export)
        self.pushButton_export_audio_file.setEnabled(False)
        self.pushButton_export_audio_file.setGeometry(QtCore.QRect(230, 50, 20, 20))
        self.pushButton_export_audio_file.setIcon(icon8)
        self.pushButton_export_audio_file.setObjectName(_fromUtf8("pushButton_export_audio_file"))
        self.lineEdit_export_audio = QtGui.QLineEdit(self.tab_export)
        self.lineEdit_export_audio.setEnabled(False)
        self.lineEdit_export_audio.setGeometry(QtCore.QRect(90, 50, 131, 20))
        self.lineEdit_export_audio.setObjectName(_fromUtf8("lineEdit_export_audio"))
        self.label_33 = QtGui.QLabel(self.tab_export)
        self.label_33.setGeometry(QtCore.QRect(20, 50, 61, 20))
        self.label_33.setObjectName(_fromUtf8("label_33"))
        self.tabWidget.addTab(self.tab_export, _fromUtf8(""))

        self.retranslateUi(MilkMachine)
        self.tabWidget.setCurrentIndex(0)
        self.tabWidget_2.setCurrentIndex(0)
        self.tabWidget_3.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MilkMachine)
        MilkMachine.setTabOrder(self.tabWidget, self.buttonImportGPS)
        MilkMachine.setTabOrder(self.buttonImportGPS, self.lineEdit_ImportGPS)
        MilkMachine.setTabOrder(self.lineEdit_ImportGPS, self.buttonDrawTrack)
        MilkMachine.setTabOrder(self.buttonDrawTrack, self.checkBox_headoftrack)
        MilkMachine.setTabOrder(self.checkBox_headoftrack, self.buttonImport_audio)
        MilkMachine.setTabOrder(self.buttonImport_audio, self.lineEdit_InAudio1)
        MilkMachine.setTabOrder(self.lineEdit_InAudio1, self.pushButton_clearAudio1)
        MilkMachine.setTabOrder(self.pushButton_clearAudio1, self.pushButton_Audio1info)
        MilkMachine.setTabOrder(self.pushButton_Audio1info, self.pushButton_sync)
        MilkMachine.setTabOrder(self.pushButton_sync, self.pushButton_Audio1)
        MilkMachine.setTabOrder(self.pushButton_Audio1, self.pushButton_stop1)
        MilkMachine.setTabOrder(self.pushButton_stop1, self.checkBox_import_indicator)
        MilkMachine.setTabOrder(self.checkBox_import_indicator, self.lineEdit_time_active)
        MilkMachine.setTabOrder(self.lineEdit_time_active, self.checkBox_time_edit)
        MilkMachine.setTabOrder(self.checkBox_time_edit, self.dateTimeEdit_start)
        MilkMachine.setTabOrder(self.dateTimeEdit_start, self.dateTimeEdit_end)
        MilkMachine.setTabOrder(self.dateTimeEdit_end, self.pushButton_time_apply_startend)
        MilkMachine.setTabOrder(self.pushButton_time_apply_startend, self.lineEdit_filtering_active)
        MilkMachine.setTabOrder(self.lineEdit_filtering_active, self.checkBox_filtering_edit)
        MilkMachine.setTabOrder(self.checkBox_filtering_edit, self.radioButton_filtering_xy)
        MilkMachine.setTabOrder(self.radioButton_filtering_xy, self.radioButton_filtering_z)
        MilkMachine.setTabOrder(self.radioButton_filtering_z, self.radioButton_filtering_linear)
        MilkMachine.setTabOrder(self.radioButton_filtering_linear, self.doubleSpinBox_filtering_xweight)
        MilkMachine.setTabOrder(self.doubleSpinBox_filtering_xweight, self.doubleSpinBox_filtering_yweight)
        MilkMachine.setTabOrder(self.doubleSpinBox_filtering_yweight, self.radioButton_filtering_quad)
        MilkMachine.setTabOrder(self.radioButton_filtering_quad, self.comboBox_filtering_spline)
        MilkMachine.setTabOrder(self.comboBox_filtering_spline, self.doubleSpinBox_filtering_spline_weight)
        MilkMachine.setTabOrder(self.doubleSpinBox_filtering_spline_weight, self.radioButton_filtering_center)
        MilkMachine.setTabOrder(self.radioButton_filtering_center, self.doubleSpinBox_filtering_center_weight)
        MilkMachine.setTabOrder(self.doubleSpinBox_filtering_center_weight, self.radioButton_filtering_moving)
        MilkMachine.setTabOrder(self.radioButton_filtering_moving, self.spinBox_filtering_moving)
        MilkMachine.setTabOrder(self.spinBox_filtering_moving, self.radioButton_filtering_zscale)
        MilkMachine.setTabOrder(self.radioButton_filtering_zscale, self.lineEdit_filtering_min)
        MilkMachine.setTabOrder(self.lineEdit_filtering_min, self.lineEdit_filtering_max)
        MilkMachine.setTabOrder(self.lineEdit_filtering_max, self.checkBox_filtering_showplot)
        MilkMachine.setTabOrder(self.checkBox_filtering_showplot, self.pushButton_filtering_apply)
        MilkMachine.setTabOrder(self.pushButton_filtering_apply, self.lineEdit_rendering_active)
        MilkMachine.setTabOrder(self.lineEdit_rendering_active, self.checkBox_rendering_edit)
        MilkMachine.setTabOrder(self.checkBox_rendering_edit, self.comboBox_rendering_icon_color)
        MilkMachine.setTabOrder(self.comboBox_rendering_icon_color, self.lineEdit_rendering_icon_transparency)
        MilkMachine.setTabOrder(self.lineEdit_rendering_icon_transparency, self.comboBox_rendering_icon_colormode)
        MilkMachine.setTabOrder(self.comboBox_rendering_icon_colormode, self.lineEdit_rendering_icon_scale)
        MilkMachine.setTabOrder(self.lineEdit_rendering_icon_scale, self.lineEdit_rendering_icon_heading)
        MilkMachine.setTabOrder(self.lineEdit_rendering_icon_heading, self.lineEdit_rendering_icon_icon)
        MilkMachine.setTabOrder(self.lineEdit_rendering_icon_icon, self.lineEdit_rendering_icon_hotspot)
        MilkMachine.setTabOrder(self.lineEdit_rendering_icon_hotspot, self.pushButton_rendering_icon_apply)
        MilkMachine.setTabOrder(self.pushButton_rendering_icon_apply, self.comboBox_rendering_label_color)
        MilkMachine.setTabOrder(self.comboBox_rendering_label_color, self.comboBox_rendering_label_colormode)
        MilkMachine.setTabOrder(self.comboBox_rendering_label_colormode, self.lineEdit_rendering_label_scale)
        MilkMachine.setTabOrder(self.lineEdit_rendering_label_scale, self.pushButton_rendering_label_apply)
        MilkMachine.setTabOrder(self.pushButton_rendering_label_apply, self.lineEdit_rendering_model_link)
        MilkMachine.setTabOrder(self.lineEdit_rendering_model_link, self.pushButton_rendering_model_file)
        MilkMachine.setTabOrder(self.pushButton_rendering_model_file, self.lineEdit_rendering_model_longitude)
        MilkMachine.setTabOrder(self.lineEdit_rendering_model_longitude, self.pushButton_rendering_model_xy)
        MilkMachine.setTabOrder(self.pushButton_rendering_model_xy, self.lineEdit_rendering_model_latitude)
        MilkMachine.setTabOrder(self.lineEdit_rendering_model_latitude, self.lineEdit_rendering_model_altitude)
        MilkMachine.setTabOrder(self.lineEdit_rendering_model_altitude, self.checkBox_rendering_model_z)
        MilkMachine.setTabOrder(self.checkBox_rendering_model_z, self.lineEdit_rendering_model_scale)
        MilkMachine.setTabOrder(self.lineEdit_rendering_model_scale, self.pushButton_rendering_model_apply)
        MilkMachine.setTabOrder(self.pushButton_rendering_model_apply, self.lineEdit_visualization_active)
        MilkMachine.setTabOrder(self.lineEdit_visualization_active, self.checkBox_visualization_edit)
        MilkMachine.setTabOrder(self.checkBox_visualization_edit, self.lineEdit_tourname)
        MilkMachine.setTabOrder(self.lineEdit_tourname, self.comboBox_flyto_mode)
        MilkMachine.setTabOrder(self.comboBox_flyto_mode, self.lineEdit_flyto_duration)
        MilkMachine.setTabOrder(self.lineEdit_flyto_duration, self.tabWidget_2)
        MilkMachine.setTabOrder(self.tabWidget_2, self.lineEdit_visualization_camera_longitude)
        MilkMachine.setTabOrder(self.lineEdit_visualization_camera_longitude, self.lineEdit_visualization_camera_longitude_off)
        MilkMachine.setTabOrder(self.lineEdit_visualization_camera_longitude_off, self.lineEdit_visualization_camera_latitude)
        MilkMachine.setTabOrder(self.lineEdit_visualization_camera_latitude, self.lineEdit_visualization_camera_latitude_off)
        MilkMachine.setTabOrder(self.lineEdit_visualization_camera_latitude_off, self.pushButton_visualization_camera_xy)
        MilkMachine.setTabOrder(self.pushButton_visualization_camera_xy, self.lineEdit_visualization_camera_altitude)
        MilkMachine.setTabOrder(self.lineEdit_visualization_camera_altitude, self.comboBox_altitudemode)
        MilkMachine.setTabOrder(self.comboBox_altitudemode, self.comboBox_gxaltitudemode)
        MilkMachine.setTabOrder(self.comboBox_gxaltitudemode, self.lineEdit__visualization_camera_gxhoriz)
        MilkMachine.setTabOrder(self.lineEdit__visualization_camera_gxhoriz, self.lineEdit__visualization_camera_heading)
        MilkMachine.setTabOrder(self.lineEdit__visualization_camera_heading, self.lineEdit__visualization_camera_roll)
        MilkMachine.setTabOrder(self.lineEdit__visualization_camera_roll, self.lineEdit__visualization_camera_tilt)
        MilkMachine.setTabOrder(self.lineEdit__visualization_camera_tilt, self.pushButton_camera_apply)
        MilkMachine.setTabOrder(self.pushButton_camera_apply, self.lineEdit_visualization_follow_altitude)
        MilkMachine.setTabOrder(self.lineEdit_visualization_follow_altitude, self.comboBox_follow_altitudemode)
        MilkMachine.setTabOrder(self.comboBox_follow_altitudemode, self.comboBox_follow_gxaltitudemode)
        MilkMachine.setTabOrder(self.comboBox_follow_gxaltitudemode, self.lineEdit__visualization_follow_gxhoriz)
        MilkMachine.setTabOrder(self.lineEdit__visualization_follow_gxhoriz, self.lineEdit__visualization_follow_range)
        MilkMachine.setTabOrder(self.lineEdit__visualization_follow_range, self.lineEdit__visualization_follow_tilt)
        MilkMachine.setTabOrder(self.lineEdit__visualization_follow_tilt, self.lineEdit__visualization_follow_follow_angle)
        MilkMachine.setTabOrder(self.lineEdit__visualization_follow_follow_angle, self.lineEdit__visualization_follow_smoother)
        MilkMachine.setTabOrder(self.lineEdit__visualization_follow_smoother, self.lineEdit__visualization_follow_hoffset)
        MilkMachine.setTabOrder(self.lineEdit__visualization_follow_hoffset, self.pushButton_follow_apply)
        MilkMachine.setTabOrder(self.pushButton_follow_apply, self.pushButton_visualization_camera_symbolize)
        MilkMachine.setTabOrder(self.pushButton_visualization_camera_symbolize, self.chkActivate)
        MilkMachine.setTabOrder(self.chkActivate, self.txtFeedback)
        MilkMachine.setTabOrder(self.txtFeedback, self.pushButton_visualization_camera_tofollow)
        MilkMachine.setTabOrder(self.pushButton_visualization_camera_tofollow, self.pushButton_visualization_camera_tocustom)
        MilkMachine.setTabOrder(self.pushButton_visualization_camera_tocustom, self.tabWidget_3)
        MilkMachine.setTabOrder(self.tabWidget_3, self.lineEdit_visualization_lookat_altitude)
        MilkMachine.setTabOrder(self.lineEdit_visualization_lookat_altitude, self.comboBox_lookat_altitudemode)
        MilkMachine.setTabOrder(self.comboBox_lookat_altitudemode, self.comboBox_lookat_gxaltitudemode)
        MilkMachine.setTabOrder(self.comboBox_lookat_gxaltitudemode, self.lineEdit__visualization_lookat_range)
        MilkMachine.setTabOrder(self.lineEdit__visualization_lookat_range, self.lineEdit__visualization_lookat_heading)
        MilkMachine.setTabOrder(self.lineEdit__visualization_lookat_heading, self.lineEdit__visualization_lookat_tilt)
        MilkMachine.setTabOrder(self.lineEdit__visualization_lookat_tilt, self.pushButton_lookat_apply)
        MilkMachine.setTabOrder(self.pushButton_lookat_apply, self.lineEdit_visualization_circle_altitude)
        MilkMachine.setTabOrder(self.lineEdit_visualization_circle_altitude, self.comboBox_circle_altitudemode)
        MilkMachine.setTabOrder(self.comboBox_circle_altitudemode, self.comboBox_circle_gxaltitudemode)
        MilkMachine.setTabOrder(self.comboBox_circle_gxaltitudemode, self.lineEdit__visualization_circle_tilt)
        MilkMachine.setTabOrder(self.lineEdit__visualization_circle_tilt, self.lineEdit__visualization_circle_range)
        MilkMachine.setTabOrder(self.lineEdit__visualization_circle_range, self.lineEdit__visualization_circle_duration)
        MilkMachine.setTabOrder(self.lineEdit__visualization_circle_duration, self.lineEdit__visualization_circle_start_heading)
        MilkMachine.setTabOrder(self.lineEdit__visualization_circle_start_heading, self.lineEdit__visualization_circle_rotations)
        MilkMachine.setTabOrder(self.lineEdit__visualization_circle_rotations, self.comboBox_visualization_direction)
        MilkMachine.setTabOrder(self.comboBox_visualization_direction, self.pushButton_circle_apply)
        MilkMachine.setTabOrder(self.pushButton_circle_apply, self.lineEdit_export_active)
        MilkMachine.setTabOrder(self.lineEdit_export_active, self.lineEdit_export_audio)
        MilkMachine.setTabOrder(self.lineEdit_export_audio, self.pushButton_export_audio_file)
        MilkMachine.setTabOrder(self.pushButton_export_audio_file, self.buttonExportTrack)
        MilkMachine.setTabOrder(self.buttonExportTrack, self.pushButton_TrackInfo)
        MilkMachine.setTabOrder(self.pushButton_TrackInfo, self.pushButton_google_earth)
        MilkMachine.setTabOrder(self.pushButton_google_earth, self.checkBox_sync_point)

    def retranslateUi(self, MilkMachine):
        MilkMachine.setWindowTitle(_translate("MilkMachine", "MilkMachine", None))
        self.pushButton_Audio1info.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Click for information about the current audio track</p></body></html>", None))
        self.buttonImportGPS.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Browse to a .csv file that is formatted for Milk Machine.</p></body></html>", None))
        self.buttonImportGPS.setText(_translate("MilkMachine", "Import GPS", None))
        self.label_2.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Feature ID (FID) number. For point data layers, this is a automatic number that is generated by QGIS to indicate sequential point number from the &quot;starting point&quot; of the track. The numbering starts at 0</p></body></html>", None))
        self.label_2.setText(_translate("MilkMachine", "Feature ID (FID)", None))
        self.pushButton_clearAudio1.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Clear the audio input box</p></body></html>", None))
        self.buttonDrawTrack.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Draw the imported GPS track on the map. This will draw the file that was imported (above) as a &quot;shapefile&quot; with the same name as the imported file. </p></body></html>", None))
        self.buttonDrawTrack.setText(_translate("MilkMachine", "Draw Track", None))
        self.lineEdit_ImportGPS.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Raw GPS input file. CSV is the only supported format. Input fields must include; &quot;date&quot;, &quot;time&quot;, &quot;x&quot;, &quot;y&quot;, and &quot;altitude&quot;. See the &quot;Format&quot; dropdown for acceptable date formats. Time must be formatted HH:MM:SS. &quot;x&quot;, &quot;y&quot;, and &quot;altitude&quot; must be numeric.</p></body></html>", None))
        self.lineEdit_ImportGPS.setPlaceholderText(_translate("MilkMachine", "*.csv", None))
        self.pushButton_Audio1.setToolTip(_translate("MilkMachine", "<html><head/><body><p>After selecting a point in the GPS track that matches the .WAV audio file, click play. The VLC media player will launch, starting at the time within the audio file that matches the time within the point file. </p></body></html>", None))
        self.lcdNumber_Audio1_C.setToolTip(_translate("MilkMachine", "<html><head/><body><p>The clock time stamp on the audio file.</p></body></html>", None))
        self.pushButton_stop1.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Stops and closes the VLC media player and audio file</p></body></html>", None))
        self.label_3.setToolTip(_translate("MilkMachine", "<html><head/><body><p>The duration into the audio file that is currently playing.</p></body></html>", None))
        self.label_3.setText(_translate("MilkMachine", "Duration Into Audio", None))
        self.lcdNumber_Audio1_D.setToolTip(_translate("MilkMachine", "<html><head/><body><p>The duration into the audio file that is currently playing.</p></body></html>", None))
        self.label.setToolTip(_translate("MilkMachine", "<html><head/><body><p>The clock time stamp on the audio file.</p></body></html>", None))
        self.label.setText(_translate("MilkMachine", "Audio Clock Time", None))
        self.lcdNumber_Audio1_P.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Feature ID (FID) number. For point data layers, this is a automatic number that is generated by QGIS to indicate sequential point number from the &quot;starting point&quot; of the track. The numbering starts at 0</p></body></html>", None))
        self.buttonImport_audio.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Browse to the .wav file that matches one of the GPS tracks in the table of contents. Once the .wav file is imported, select the point in the track (using the select tool) where the audio file should start to play.</p></body></html>", None))
        self.buttonImport_audio.setText(_translate("MilkMachine", "Import Audio", None))
        self.pushButton_sync.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Syncronize the audio with the GPS track. Press the button while a track is selected that matches the audio file and a marker will be produced that shows where the audio starts in the GPS track.<br/></p></body></html>", None))
        self.checkBox_headoftrack.setToolTip(_translate("MilkMachine", "<html><head/><body><p>If checked, a green marker is drawn when the &quot;Draw Track&quot; button is pressed to indicate where the track starts.</p></body></html>", None))
        self.checkBox_headoftrack.setText(_translate("MilkMachine", "Indicate start of GPS Track", None))
        self.checkBox_import_indicator.setToolTip(_translate("MilkMachine", "<html><head/><body><p>If checked, QGIS will &quot;select&quot; the point that matches the time on the audio file. The map will move along with the audio.</p></body></html>", None))
        self.checkBox_import_indicator.setText(_translate("MilkMachine", "Indicate Selected Point", None))
        self.checkBox_sync_point.setToolTip(_translate("MilkMachine", "<html><head/><body><p>If selected, when the sync button is pushed, a blue point will be added to the map at the point that matches the audio start time. A red point will be added to the map at the point that matches the audio end time. </p></body></html>", None))
        self.checkBox_sync_point.setText(_translate("MilkMachine", "Indicate \n"
"Sync Points", None))
        self.comboBox_importDateFormat.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Date format must be one of; mm/dd/yyyy, dd/mm/yyyy, or yyyy/mm/dd. Yes, a forward slash is required. Time must be in HH:MM:SS format. </p></body></html>", None))
        self.label_68.setToolTip(_translate("MilkMachine", "<html><head/><body><p>The duration into the audio file that is currently playing.</p></body></html>", None))
        self.label_68.setText(_translate("MilkMachine", "Format:", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_import), _translate("MilkMachine", "Import and Sync", None))
        self.tabWidget.setTabToolTip(self.tabWidget.indexOf(self.tab_import), _translate("MilkMachine", "<html><head/><body><p>Import raw .kml files and render as an ESRI shapefile for editing, and import audio files for interactive time syncronization.</p></body></html>", None))
        self.dateTimeEdit_start.setDisplayFormat(_translate("MilkMachine", "M/d/yyyy hh:mm:ss AP", None))
        self.checkBox_time_edit.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Checking this box will enable the &quot;Time&quot; fields for editing. The user must select a layer in the table of contents, have editing &quot;on&quot;, and have at least one selected point.</p></body></html>", None))
        self.checkBox_time_edit.setText(_translate("MilkMachine", "Edit Time Stamps", None))
        self.lineEdit_time_active.setToolTip(_translate("MilkMachine", "<html><head/><body><p>The selected layer in the table of contents.</p></body></html>", None))
        self.label_visualization_active_5.setText(_translate("MilkMachine", "<html><head/><body><p><span style=\" color:#000000;\">Active Track:</span></p></body></html>", None))
        self.label_visualization_active_6.setText(_translate("MilkMachine", "<html><head/><body><p><span style=\" color:#000000;\">Start Date/Time:</span></p></body></html>", None))
        self.dateTimeEdit_end.setDisplayFormat(_translate("MilkMachine", "M/d/yyyy hh:mm:ss AP", None))
        self.label_visualization_active_7.setText(_translate("MilkMachine", "<html><head/><body><p><span style=\" color:#000000;\">End Date/Time:</span></p></body></html>", None))
        self.pushButton_time_apply_startend.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Apply the camera view changes to the selected points in the active layer. To roll back these edits, select &quot;Cancel for selected layer&quot; in the editor options.</p></body></html>", None))
        self.pushButton_time_apply_startend.setText(_translate("MilkMachine", "Apply", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MilkMachine", "Time", None))
        self.lineEdit_filtering_active.setToolTip(_translate("MilkMachine", "<html><head/><body><p>The selected layer in the table of contents.</p></body></html>", None))
        self.label_visualization_active_4.setText(_translate("MilkMachine", "<html><head/><body><p><span style=\" color:#000000;\">Active Track:</span></p></body></html>", None))
        self.checkBox_filtering_edit.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Checking this box will enable the &quot;Filtering&quot; fields for editing. The user must select a layer in the table of contents, have editing &quot;on&quot;, and have at least one selected point.</p></body></html>", None))
        self.checkBox_filtering_edit.setText(_translate("MilkMachine", "Filter Points", None))
        self.checkBox_filtering_showplot.setToolTip(_translate("MilkMachine", "<html><head/><body><p>If selected, a scatterplot will be created to show the original and filtered points. Currently on supported on Windows.</p></body></html>", None))
        self.checkBox_filtering_showplot.setText(_translate("MilkMachine", "Show Plot", None))
        self.label_66.setText(_translate("MilkMachine", "Window:", None))
        self.radioButton_filtering_linear.setToolTip(_translate("MilkMachine", "<html><head/><body><p>After selecting a number of points within an edit session, the linear regression filter will place all points along a line. The line is fit using a geometric mean least squares regression. </p><p>Use the X and Y weights to adjust the regression. The values range from 0-1. If 1, the values will be placed along the line. If 0.5, the values will be place 50% between the original value and the estimated value.</p></body></html>", None))
        self.radioButton_filtering_linear.setText(_translate("MilkMachine", "Linear", None))
        self.radioButton_filtering_quad.setToolTip(_translate("MilkMachine", "<html><head/><body><p>After selecting a number of points within an edit session, the quadratic regression filter will place all points along a line. The line is fit using a least squares regression.</p></body></html>", None))
        self.radioButton_filtering_quad.setText(_translate("MilkMachine", "Spline", None))
        self.spinBox_filtering_moving.setToolTip(_translate("MilkMachine", "<html><head/><body><p>An odd positive integer.</p></body></html>", None))
        self.pushButton_filtering_apply.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Apply the selected filter to the selected points in the active layer. To roll back these edits, select &quot;Cancel for selected layer&quot; in the editor options.</p></body></html>", None))
        self.pushButton_filtering_apply.setText(_translate("MilkMachine", "Apply", None))
        self.radioButton_filtering_moving.setToolTip(_translate("MilkMachine", "<html><head/><body><p>After selecting a number of points within an edit session, the moving average filter will apply a moving window average to the points. The window will exclude the points on the end, since the window will not be able to &quot;see&quot; past the selection. Those points at the beginning and end will not change their coordinates. The window must be an odd integer in order for the window to be centered on each point. </p></body></html>", None))
        self.radioButton_filtering_moving.setText(_translate("MilkMachine", "Moving Average", None))
        self.label_43.setText(_translate("MilkMachine", "Filtering Options", None))
        self.label_46.setToolTip(_translate("MilkMachine", "<html><head/><body><p><br/></p></body></html>", None))
        self.label_46.setText(_translate("MilkMachine", "X Weight:", None))
        self.label_47.setToolTip(_translate("MilkMachine", "<html><head/><body><p><br/></p></body></html>", None))
        self.label_47.setText(_translate("MilkMachine", "Y Weight:", None))
        self.doubleSpinBox_filtering_xweight.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Use the X and Y weights to adjust the regression. The values range from 0-1. If 1, the values will be placed along the line. If 0.5, the values will be place 50% between the original value and the estimated value.</p></body></html>", None))
        self.doubleSpinBox_filtering_yweight.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Use the X and Y weights to adjust the regression. The values range from 0-1. If 1, the values will be placed along the line. If 0.5, the values will be place 50% between the original value and the estimated value.</p></body></html>", None))
        self.radioButton_filtering_zscale.setText(_translate("MilkMachine", "Scale Z to Range", None))
        self.label_48.setText(_translate("MilkMachine", "Minimum:", None))
        self.label_52.setText(_translate("MilkMachine", "Maximum:", None))
        self.radioButton_filtering_center.setToolTip(_translate("MilkMachine", "<html><head/><body><p>&quot;Magically Centering&quot; a group of selected points will move all of the selected points towards the geometric center of those points. If the weight is set at 1, then the points will be moved 100% of the distance between the original locations and the center. If the weight is 0.5, then the points will only be moved 50% of the distance between their original location and the center.</p><p><span style=\" font-size:16pt; font-weight:600;\">Figure 1</span><span style=\" font-size:16pt;\">. Uncentered points</span></p><p><img src=\":/plugins/milkmachine/uncentered.png\"/></p><p><span style=\" font-size:16pt; font-weight:600;\">Figure 2</span><span style=\" font-size:16pt;\">. Centered points (weight = 1)</span></p><p><img src=\":/plugins/milkmachine/centered.png\"/></p></body></html>", None))
        self.radioButton_filtering_center.setText(_translate("MilkMachine", "Magically Center", None))
        self.label_63.setToolTip(_translate("MilkMachine", "<html><head/><body><p><br/></p></body></html>", None))
        self.label_63.setText(_translate("MilkMachine", "Weight:", None))
        self.doubleSpinBox_filtering_center_weight.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Use the weght to adjust the centering of the selected points. The values range from 0-1. If 1, the values will all be placed at the geometric center. If 0.5, the values will be place 50% between the original value and the geometric center.</p></body></html>", None))
        self.label_64.setToolTip(_translate("MilkMachine", "<html><head/><body><p><br/></p></body></html>", None))
        self.label_64.setText(_translate("MilkMachine", "Method:", None))
        self.comboBox_filtering_spline.setToolTip(_translate("MilkMachine", "<html><head/><body><p>In mathematics, a spline is a numeric function that is piecewise-defined by polynomial functions, and which possesses a sufficiently high degree of smoothness at the places where the polynomial pieces connect (which are known as knots).</p><p><br/></p><p><span style=\" font-weight:600;\">Quadratic</span> - Used a quadratic (i.e. 2nd order polynomial) function to create the smoothing spline.</p><p><br/></p><p><span style=\" font-weight:600;\">Cubic</span> -  Used a cubic (i.e. 3nd order polynomial) function to create the smoothing spline.</p><p><br/></p><p><span style=\" font-weight:600;\">4th Order</span> - 4th order polynomial function.</p><p><br/></p><p><span style=\" font-weight:600;\">5th Order</span> - 5th order polynomial function.</p></body></html>", None))
        self.label_65.setToolTip(_translate("MilkMachine", "<html><head/><body><p><br/></p></body></html>", None))
        self.label_65.setText(_translate("MilkMachine", "Weight:", None))
        self.doubleSpinBox_filtering_spline_weight.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Use the weight to adjust the spline smoother. The values range from 0-1. If 1, the values will be placed along the line. If 0.5, the values will be place 50% between the original value and the estimated value.</p></body></html>", None))
        self.label_45.setText(_translate("MilkMachine", "Filtering Axis", None))
        self.radioButton_filtering_xy.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Filter the X and Y axis (i.e. the longitude and latitude axes, respectively). This will filter the actual QGIS X and Y point locations (not found in the attribute table).</p></body></html>", None))
        self.radioButton_filtering_xy.setText(_translate("MilkMachine", "X, Y", None))
        self.radioButton_filtering_z.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Filter the Z axis (i.e. altitude). This filters the &quot;altitude&quot; field.</p></body></html>", None))
        self.radioButton_filtering_z.setText(_translate("MilkMachine", "Z", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MilkMachine", "Filtering", None))
        self.lineEdit_rendering_active.setToolTip(_translate("MilkMachine", "<html><head/><body><p>The selected layer in the table of contents.</p></body></html>", None))
        self.label_visualization_active_3.setText(_translate("MilkMachine", "<html><head/><body><p><span style=\" color:#000000;\">Active Track:</span></p></body></html>", None))
        self.checkBox_rendering_edit.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Checking this box will enable the &quot;Icon Style&quot; and &quot;Label Style&quot; fields for editing. The user must select a layer in the table of contents, have editing &quot;on&quot;, and have at least point selected. Styling icons and labels can be done independently.</p></body></html>", None))
        self.checkBox_rendering_edit.setText(_translate("MilkMachine", "Edit Points", None))
        self.groupBox_3.setTitle(_translate("MilkMachine", "Label Style", None))
        self.label_17.setText(_translate("MilkMachine", "colormode:", None))
        self.label_16.setText(_translate("MilkMachine", "color:", None))
        self.comboBox_rendering_label_colormode.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Values for &lt;colorMode&gt; are <span style=\" font-weight:600;\">normal</span> (no effect) and <span style=\" font-weight:600;\">random</span>. A value of <span style=\" font-weight:600;\">random</span> applies a random linear scale to the base &lt;color&gt; as follows. </p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">To achieve a truly random selection of colors, specify a base &lt;color&gt; of white (ffffffff). </li><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If you specify a single color component (for example, a value of ff0000ff for <span style=\" font-style:italic;\">red</span>), random color values for that one component (red) will be selected. In this case, the values would range from 00 (<span style=\" font-style:italic;\">black</span>) to ff (<span style=\" font-style:italic;\">full red</span>). </li><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If you specify values for two or for all three color components, a random linear scale is applied to each color component, with results ranging from black to the maximum values specified for each component.</li><li style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The opacity of a color comes from the alpha component of &lt;color&gt; and is never randomized. </li></ul></body></html>", None))
        self.lineEdit_rendering_label_scale.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Resize the icon by the scale value. Default is 1. For example, if scale is 5 the icon will be 5x larger than normal.</p></body></html>", None))
        self.lineEdit_rendering_label_scale.setText(_translate("MilkMachine", "0", None))
        self.label_18.setText(_translate("MilkMachine", "scale:", None))
        self.pushButton_rendering_label_apply.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Apply the label style changes to the selected points in the active layer. To roll back these edits, select &quot;Cancel for selected layer&quot; in the editor options.</p></body></html>", None))
        self.pushButton_rendering_label_apply.setText(_translate("MilkMachine", "Apply", None))
        self.comboBox_rendering_label_color.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Choose a color from the dropdown list. Milk Machine will translate this into hexidecimal for kml.</p></body></html>", None))
        self.groupBox_4.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Specifies how icons for point Placemarks are drawn, both in the Places panel and in the 3D viewer of Google Earth. The &lt;Icon&gt; element specifies the icon image. The &lt;scale&gt; element specifies the <span style=\" font-style:italic;\">x, y</span> scaling of the icon. The color specified in the &lt;color&gt; element of &lt;IconStyle&gt; is blended with the color of the &lt;Icon&gt;.</p></body></html>", None))
        self.groupBox_4.setTitle(_translate("MilkMachine", "Icon Style", None))
        self.comboBox_rendering_icon_colormode.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Values for &lt;colorMode&gt; are <span style=\" font-weight:600;\">normal</span> (no effect) and <span style=\" font-weight:600;\">random</span>. A value of <span style=\" font-weight:600;\">random</span> applies a random linear scale to the base &lt;color&gt; as follows. </p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">To achieve a truly random selection of colors, specify a base &lt;color&gt; of white (ffffffff). </li><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If you specify a single color component (for example, a value of ff0000ff for <span style=\" font-style:italic;\">red</span>), random color values for that one component (red) will be selected. In this case, the values would range from 00 (<span style=\" font-style:italic;\">black</span>) to ff (<span style=\" font-style:italic;\">full red</span>). </li><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If you specify values for two or for all three color components, a random linear scale is applied to each color component, with results ranging from black to the maximum values specified for each component.</li><li style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The opacity of a color comes from the alpha component of &lt;color&gt; and is never randomized. </li></ul></body></html>", None))
        self.label_19.setText(_translate("MilkMachine", "colormode:", None))
        self.label_20.setText(_translate("MilkMachine", "color:", None))
        self.lineEdit_rendering_icon_scale.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Resize the icon by the scale value. Default is 1. For example, if scale is 5 the icon will be 5x larger than normal.</p></body></html>", None))
        self.lineEdit_rendering_icon_scale.setText(_translate("MilkMachine", "1", None))
        self.label_21.setText(_translate("MilkMachine", "scale:", None))
        self.label_22.setText(_translate("MilkMachine", "heading:", None))
        self.lineEdit_rendering_icon_heading.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Direction (<span style=\" font-style:italic;\">e.g.</span> North, South, East, West), in degrees. Default=0 (North).Values range from 0 to 360 degrees.</p></body></html>", None))
        self.lineEdit_rendering_icon_heading.setText(_translate("MilkMachine", "0", None))
        self.label_23.setText(_translate("MilkMachine", "icon:", None))
        self.lineEdit_rendering_icon_icon.setToolTip(_translate("MilkMachine", "<html><head/><body><p>A custom Icon. For example;</p><p>Airport; http://maps.google.com/mapfiles/kml/shapes/airports.png</p></body></html>", None))
        self.label_24.setText(_translate("MilkMachine", "hotspot:", None))
        self.lineEdit_rendering_icon_hotspot.setToolTip(_translate("MilkMachine", "<html><head/><body><p><a name=\"hotspot\"/>&lt;hotSpot x=&quot;0.5&quot; y=&quot;0.5&quot; xunits=&quot;fraction&quot; yunits=&quot;fraction&quot;&gt; </p><p>Specifies the position within the Icon that is &quot;anchored&quot; to the &lt;Point&gt; specified in the Placemark. The <span style=\" font-style:italic;\">x</span> and <span style=\" font-style:italic;\">y</span> values can be specified in three different ways: as <span style=\" font-style:italic;\">pixels</span> (<span style=\" font-weight:600;\">&quot;pixels&quot;</span>), as <span style=\" font-style:italic;\">fractions</span> of the icon (<span style=\" font-weight:600;\">&quot;fraction&quot;</span><span style=\" font-style:italic;\">)</span>, or as <span style=\" font-style:italic;\">inset pixels </span>(<span style=\" font-weight:600;\">&quot;insetPixels&quot;</span>), which is an offset in pixels from the upper right corner of the icon. The <span style=\" font-style:italic;\">x</span> and <span style=\" font-style:italic;\">y</span> positions can be specified in different ways—for example, <span style=\" font-style:italic;\">x</span> can be in pixels and <span style=\" font-style:italic;\">y</span> can be a fraction. The origin of the coordinate system is in the lower left corner of the icon. </p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:0px; margin-left:30px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">x </span>- Either the number of pixels, a fractional component of the icon, or a pixel inset indicating the <span style=\" font-style:italic;\">x</span> component of a point on the icon. </li><li style=\" margin-top:0px; margin-bottom:0px; margin-left:30px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">y </span>- Either the number of pixels, a fractional component of the icon, or a pixel inset indicating the <span style=\" font-style:italic;\">y</span> component of a point on the icon. </li><li style=\" margin-top:0px; margin-bottom:0px; margin-left:30px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">xunits </span>- Units in which the <span style=\" font-style:italic;\">x</span> value is specified. A value of <span style=\" font-weight:600;\">fraction</span> indicates the <span style=\" font-style:italic;\">x</span> value is a fraction of the icon. A value of <span style=\" font-weight:600;\">pixels</span> indicates the <span style=\" font-style:italic;\">x</span> value in pixels. A value of <span style=\" font-weight:600;\">insetPixels</span> indicates the indent from the right edge of the icon. </li><li style=\" margin-top:0px; margin-bottom:12px; margin-left:30px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">yunits</span> - Units in which the <span style=\" font-style:italic;\">y</span> value is specified. A value of <span style=\" font-weight:600;\">fraction</span> indicates the <span style=\" font-style:italic;\">y</span> value is a fraction of the icon. A value of <span style=\" font-weight:600;\">pixels</span> indicates the <span style=\" font-style:italic;\">y</span> value in pixels. A value of <span style=\" font-weight:600;\">insetPixels</span> indicates the indent from the top edge of the icon. </li></ul></body></html>", None))
        self.pushButton_rendering_icon_apply.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Apply the icon style changes to the selected points in the active layer. To roll back these edits, select &quot;Cancel for selected layer&quot; in the editor options.</p></body></html>", None))
        self.pushButton_rendering_icon_apply.setText(_translate("MilkMachine", "Apply", None))
        self.label_25.setText(_translate("MilkMachine", "transparency:", None))
        self.lineEdit_rendering_icon_transparency.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Transparency of the icon. (0 - 100) 0 is fully transparent, and 100 is opaque. This field will only be enabled when color is specified.</p></body></html>", None))
        self.lineEdit_rendering_icon_transparency.setText(_translate("MilkMachine", "100", None))
        self.comboBox_rendering_icon_color.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Choose a color from the dropdown list. Milk Machine will translate this into hexidecimal for kml.</p></body></html>", None))
        self.groupBox_5.setToolTip(_translate("MilkMachine", "<html><head/><body><p>A 3D object described in a COLLADA file (referenced in the <a href=\"https://developers.google.com/kml/documentation/kmlreference#link\"><span style=\" text-decoration: underline; color:#0000ff;\">&lt;Link&gt;</span></a> tag). COLLADA files have a <span style=\" font-style:italic;\">.dae</span> file extension. Models are created in their own coordinate space and then located, positioned, and scaled in Google Earth.</p><p>Google Earth supports the COLLADA common profile, with the following exceptions: </p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Google Earth supports only triangles and lines as primitive types. The maximum number of triangles allowed is 21845. </li><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Google Earth does not support animation or skinning. </li><li style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Google Earth does not support external geometry references. </li></ul></body></html>", None))
        self.groupBox_5.setTitle(_translate("MilkMachine", "Point Model", None))
        self.lineEdit_rendering_model_link.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Path (or link) to the Collada .dae file.</p></body></html>", None))
        self.label_26.setText(_translate("MilkMachine", "link:", None))
        self.label_27.setText(_translate("MilkMachine", "longitude:", None))
        self.label_28.setText(_translate("MilkMachine", "latitude:", None))
        self.label_29.setText(_translate("MilkMachine", "altitude:", None))
        self.lineEdit_rendering_model_longitude.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Longitude (decimal degrees). Defaults to the longitude of the selected point if none is provided.</p></body></html>", None))
        self.lineEdit_rendering_model_latitude.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Latitude (decimal degrees). Defaults to the latitude of the selected point if none is provided.</p></body></html>", None))
        self.lineEdit_rendering_model_altitude.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Altitude (meters). Defaults to the altitude of the GPS, which is indicated by \'altitude\'. If no value is given it will default to ground level.</p></body></html>", None))
        self.lineEdit_rendering_model_altitude.setText(_translate("MilkMachine", "altitude", None))
        self.lineEdit_rendering_model_scale.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Scale of the point model. Defaults to 1 (regular size) is none is provided. If a value above 1 is provided it will enlarge the model by multiplying it by the scale value.</p></body></html>", None))
        self.lineEdit_rendering_model_scale.setText(_translate("MilkMachine", "1", None))
        self.label_30.setText(_translate("MilkMachine", "scale:", None))
        self.pushButton_rendering_model_apply.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Apply the model changes to the selected points. To roll back these edits, select &quot;Cancel for selected layer&quot; in the editor options.</p></body></html>", None))
        self.pushButton_rendering_model_apply.setText(_translate("MilkMachine", "Apply", None))
        self.pushButton_rendering_model_file.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Brows to .dae file.</p></body></html>", None))
        self.pushButton_rendering_model_xy.setToolTip(_translate("MilkMachine", "<html><head/><body><p>If one point is selected in the active layer, the &quot;x,y&quot; button will automatically fill the longitude and latitude location for the model using the coordinates from the selected point.</p></body></html>", None))
        self.pushButton_rendering_model_xy.setText(_translate("MilkMachine", "x,y", None))
        self.checkBox_rendering_model_z.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Checked (default) indicates that the selected points will have an altitute that matches the GPS value. Unchecked will enable the &quot;altitude&quot; entry box and the user can provide a value.</p></body></html>", None))
        self.checkBox_rendering_model_z.setText(_translate("MilkMachine", "z", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_rendering), _translate("MilkMachine", "Placemarks", None))
        self.label_visualization_active.setText(_translate("MilkMachine", "<html><head/><body><p><span style=\" color:#000000;\">Active Track:</span></p></body></html>", None))
        self.lineEdit_visualization_active.setToolTip(_translate("MilkMachine", "<html><head/><body><p>The selected layer in the table of contents.</p></body></html>", None))
        self.checkBox_visualization_edit.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Checking this box will enable the &quot;Camera&quot; and &quot;LookAt&quot; fields for editing. The user must select a layer in the table of contents, have editing &quot;on&quot;, and have at least one selected point.</p></body></html>", None))
        self.checkBox_visualization_edit.setText(_translate("MilkMachine", "Edit Tour", None))
        self.groupBox.setTitle(_translate("MilkMachine", "FlyTo", None))
        self.label_14.setText(_translate("MilkMachine", "flyToMode:", None))
        self.label_15.setText(_translate("MilkMachine", "duration:", None))
        self.lineEdit_flyto_duration.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Duration (seconds) of the FlyTo, for both Camera and LookAt views.</p></body></html>", None))
        self.checkBox_flyto_duration.setToolTip(_translate("MilkMachine", "<html><head/><body><p>When creating a kml output, the duration of the FlyTo will be the time difference between the current point and the next point. If unchecked, please specify a duration for each of the points currently selected.</p></body></html>", None))
        self.checkBox_flyto_duration.setText(_translate("MilkMachine", "Time Stamp Duration", None))
        self.groupBox_cameraview.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Introduced with KML 2.2, <span style=\" font-family:\'Courier New,courier\';\">&lt;Camera&gt;</span> provides an additional way to specify the observer\'s viewpoint and associated view parameters. <span style=\" font-family:\'Courier New,courier\';\">&lt;Camera&gt;</span> is similar to <span style=\" font-family:\'Courier New,courier\';\">&lt;LookAt&gt;</span>, since both elements define the placement and orientation of a virtual camera that is viewing the Earth. The difference is that LookAt specifies the view in terms of the point of interest that is being viewed. Camera, in contrast, specifies the view in terms of the viewer\'s position and orientation. </p></body></html>", None))
        self.groupBox_cameraview.setTitle(_translate("MilkMachine", "Camera", None))
        self.pushButton_visualization_camera_xy.setToolTip(_translate("MilkMachine", "<html><head/><body><p>If one point is selected in the active layer, the &quot;x,y&quot; button will automatically fill the longitude and latitude location for the model using the coordinates from the selected point.</p></body></html>", None))
        self.pushButton_visualization_camera_xy.setText(_translate("MilkMachine", "x,y", None))
        self.label_10.setText(_translate("MilkMachine", "*tilt:", None))
        self.lineEdit_visualization_camera_longitude.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Longitude of the virtual camera (eye point). Angular distance in degrees, relative to the Prime Meridian. Values west of the Meridian range from −180 to 0 degrees. Values east of the Meridian range from 0 to 180 degrees.</p></body></html>", None))
        self.lineEdit_visualization_camera_latitude_off.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Latitude offset (in meters) from the point location.</p></body></html>", None))
        self.label_32.setText(_translate("MilkMachine", "<html><head/><body><p>&plusmn;</p></body></html>", None))
        self.lineEdit__visualization_camera_heading.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Direction (azimuth) of the camera, in degrees. Default=0 (true North). (<a href=\"https://developers.google.com/kml/documentation/kmlreference#headingdiagram\"><span style=\" text-decoration: underline; color:#0000ff;\">See diagram</span></a>.) Values range from 0 to 360 degrees. </p></body></html>", None))
        self.lineEdit__visualization_camera_heading.setText(_translate("MilkMachine", "0", None))
        self.label_6.setText(_translate("MilkMachine", "gxaltitudemode:", None))
        self.label_12.setText(_translate("MilkMachine", "longitude:", None))
        self.lineEdit__visualization_camera_roll.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Rotation, in degrees, of the camera around the Z axis. Values range from −180 to +180 degrees. </p></body></html>", None))
        self.label_11.setText(_translate("MilkMachine", "latitude:", None))
        self.label_31.setText(_translate("MilkMachine", "<html><head/><body><p>&plusmn;</p></body></html>", None))
        self.lineEdit_visualization_camera_longitude_off.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Longitude offset (in meters) from the point location.</p></body></html>", None))
        self.label_7.setText(_translate("MilkMachine", "gxhorizfov:", None))
        self.label_4.setText(_translate("MilkMachine", "*altitude:", None))
        self.label_8.setText(_translate("MilkMachine", "*heading:", None))
        self.label_5.setText(_translate("MilkMachine", "*altitudemode:", None))
        self.comboBox_gxaltitudemode.setToolTip(_translate("MilkMachine", "<html><head/><body><p>A KML extension in the <a href=\"https://developers.google.com/kml/documentation/kmlreference#kmlextensions\"><span style=\" text-decoration: underline; color:#0000ff;\">Google extension namespace</span></a>, allowing altitudes relative to the sea floor. Values are: </p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">relativeToSeaFloor</span> - Interprets the &lt;altitude&gt; as a value in meters above the sea floor. If the point is above land rather than sea, the &lt;altitude&gt; will be interpreted as being above the ground. </li><li style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">clampToSeaFloor</span> - The &lt;altitude&gt; specification is ignored, and the Camera will be positioned on the sea floor. If the point is on land rather than at sea, the Camera will be positioned on the ground. </li></ul><p><br/></p></body></html>", None))
        self.lineEdit__visualization_camera_tilt.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Rotation, in degrees, of the camera around the <span style=\" font-style:italic;\">X</span> axis. A value of 0 indicates that the view is aimed straight down toward the earth (the most common case). A value for 90 for &lt;tilt&gt; indicates that the view is aimed toward the horizon. Values greater than 90 indicate that the view is pointed up into the sky. Values for &lt;tilt&gt; are clamped at +180 degrees. </p></body></html>", None))
        self.lineEdit_visualization_camera_latitude.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Latitude of the virtual camera. Degrees north or south of the Equator (0 degrees). Values range from −90 degrees to 90 degrees.</p></body></html>", None))
        self.lineEdit_visualization_camera_altitude.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Distance of the camera from the earth\'s surface, in meters. Interpreted according to the Camera\'s &lt;altitudeMode&gt; or &lt;gx:altitudeMode&gt;.</p></body></html>", None))
        self.lineEdit__visualization_camera_gxhoriz.setToolTip(_translate("MilkMachine", "Rotation about the x axis. <float>", None))
        self.label_9.setText(_translate("MilkMachine", "roll:", None))
        self.comboBox_altitudemode.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Specifies how the &lt;altitude&gt; specified for the Camera is interpreted. Possible values are as follows: </p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">relativeToModel</span> - If the &quot;model&quot; field has an &quot;altitude&quot; tag, the the camera altitude can be set as the vertical distance from the model.</li></ul><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">absolute </span>- Interprets the &lt;altitude&gt; as a value in meters above sea level. </li></ul><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">relativeToGround</span> - (default) Interprets the &lt;altitude&gt; as a value in meters above the ground. If the point is over water, the &lt;altitude&gt; will be interpreted as a value in meters above sea level. See <a href=\"https://developers.google.com/kml/documentation/kmlreference#gxaltitudemode\"><span style=\" text-decoration: underline; color:#0000ff;\">&lt;gx:altitudeMode&gt;</span></a> below to specify points relative to the sea floor. </li><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">clampToGround </span>- For a camera, this setting also places the camera &quot;relativeToGround&quot;, since putting the camera exactly at terrain height would mean that the eye would intersect the terrain (and the view would be blocked). </li></ul></body></html>", None))
        self.pushButton_camera_apply.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Apply the camera view changes to the selected points in the active layer. To roll back these edits, select &quot;Cancel for selected layer&quot; in the editor options.</p></body></html>", None))
        self.pushButton_camera_apply.setText(_translate("MilkMachine", "Apply", None))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_4), _translate("MilkMachine", "Custom", None))
        self.tabWidget_2.setTabToolTip(self.tabWidget_2.indexOf(self.tab_4), _translate("MilkMachine", "<html><head/><body><p>Create a camera within a tour at the selected point, or at numerous selected points.</p></body></html>", None))
        self.lineEdit__visualization_follow_range.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Distance in meters from the point. Since the &quot;Follow Behind&quot; is following the sequence of points, the &quot;range&quot; is the distance between the camera and the point (or row in the table) that is corresponds to. This is the same as the &quot;range&quot; for a KML &lt;LookAt&gt;.</p><p><img src=\":/plugins/milkmachine/camera.png\"/></p></body></html>", None))
        self.lineEdit__visualization_follow_range.setText(_translate("MilkMachine", "15", None))
        self.lineEdit__visualization_follow_tilt.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Rotation, in degrees, of the camera around the <span style=\" font-style:italic;\">X</span> axis. A value of 0 indicates that the view is aimed straight down toward the earth (the most common case). A value for 90 for &lt;tilt&gt; indicates that the view is aimed toward the horizon. Values greater than 90 indicate that the view is pointed up into the sky. Values for &lt;tilt&gt; are clamped at +180 degrees. </p><p><img src=\":/plugins/milkmachine/camera.png\"/></p></body></html>", None))
        self.lineEdit__visualization_follow_tilt.setText(_translate("MilkMachine", "48", None))
        self.label_37.setText(_translate("MilkMachine", "*altitude:", None))
        self.label_39.setText(_translate("MilkMachine", "*range:", None))
        self.lineEdit__visualization_follow_gxhoriz.setToolTip(_translate("MilkMachine", "Rotation about the x axis. <float>", None))
        self.comboBox_follow_altitudemode.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Specifies how the &lt;altitude&gt; specified for the Camera is interpreted. Possible values are as follows: </p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">relativeToModel</span> - If the &quot;model&quot; field has an &quot;altitude&quot; tag, the the camera altitude can be set as the vertical distance from the model.</li></ul><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">absolute </span>- Interprets the &lt;altitude&gt; as a value in meters above sea level. </li></ul><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">relativeToGround</span> - (default) Interprets the &lt;altitude&gt; as a value in meters above the ground. If the point is over water, the &lt;altitude&gt; will be interpreted as a value in meters above sea level. See <a href=\"https://developers.google.com/kml/documentation/kmlreference#gxaltitudemode\"><span style=\" text-decoration: underline; color:#0000ff;\">&lt;gx:altitudeMode&gt;</span></a> below to specify points relative to the sea floor. </li><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">clampToGround </span>- For a camera, this setting also places the camera &quot;relativeToGround&quot;, since putting the camera exactly at terrain height would mean that the eye would intersect the terrain (and the view would be blocked). </li></ul><p><br/></p><p><img src=\":/plugins/milkmachine/camera.png\"/></p></body></html>", None))
        self.label_34.setText(_translate("MilkMachine", "gxaltitudemode:", None))
        self.label_38.setText(_translate("MilkMachine", "*tilt:", None))
        self.label_35.setText(_translate("MilkMachine", "gxhorizfov:", None))
        self.comboBox_follow_gxaltitudemode.setToolTip(_translate("MilkMachine", "<html><head/><body><p>A KML extension in the <a href=\"https://developers.google.com/kml/documentation/kmlreference#kmlextensions\"><span style=\" text-decoration: underline; color:#0000ff;\">Google extension namespace</span></a>, allowing altitudes relative to the sea floor. Values are: </p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">relativeToSeaFloor</span> - Interprets the &lt;altitude&gt; as a value in meters above the sea floor. If the point is above land rather than sea, the &lt;altitude&gt; will be interpreted as being above the ground. </li><li style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">clampToSeaFloor</span> - The &lt;altitude&gt; specification is ignored, and the Camera will be positioned on the sea floor. If the point is on land rather than at sea, the Camera will be positioned on the ground. </li></ul><p><br/></p></body></html>", None))
        self.lineEdit_visualization_follow_altitude.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Vertical distance of the camera from the earth\'s surface, in meters. Interpreted according to the Camera\'s &lt;altitudeMode&gt; or &lt;gx:altitudeMode&gt;. If &lt;altitudemode&gt; is relativeToModel, then this is the vertical distance from the model.</p><p><img src=\":/plugins/milkmachine/camera.png\"/></p></body></html>", None))
        self.lineEdit_visualization_follow_altitude.setText(_translate("MilkMachine", "10", None))
        self.label_36.setText(_translate("MilkMachine", "*altitudemode:", None))
        self.pushButton_follow_apply.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Apply the camera view changes to the active layer. &quot;Tour Name&quot; and &quot;FlyTo mode apply to this tool. To roll back these edits, select &quot;Cancel for selected layer&quot; in the editor options.</p></body></html>", None))
        self.pushButton_follow_apply.setText(_translate("MilkMachine", "Apply", None))
        self.label_40.setText(_translate("MilkMachine", "smoother:", None))
        self.lineEdit__visualization_follow_smoother.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Number of models to look forward in order to calculate the mean angle. Each angle in the calculation is the compass angle between the current model (n) and all of the models between n and the smoother parameter. The effect is a smoothed camera heading. The larger the smoother, the more smooth the heading will be. </p></body></html>", None))
        self.lineEdit__visualization_follow_smoother.setText(_translate("MilkMachine", "10", None))
        self.label_41.setText(_translate("MilkMachine", "follow angle:", None))
        self.lineEdit__visualization_follow_follow_angle.setToolTip(_translate("MilkMachine", "<html><head/><body><p>The compass angle of the &lt;Camera&gt; relative to the point (0-360 degrees).</p><p>If the follow angle is 0, then the camera will be in front of the model. </p><p>If the follow angle is 90, then the camera will be starboard of the model.</p><p>If the follow angle is 180, then the camera will be behind (following) the model.</p><p>If the follow angle is 270, then the camera will be port of the model. </p><p><img src=\":/plugins/milkmachine/followangle.png\"/></p></body></html>", None))
        self.lineEdit__visualization_follow_follow_angle.setText(_translate("MilkMachine", "180", None))
        self.label_67.setText(_translate("MilkMachine", "heading offset:", None))
        self.lineEdit__visualization_follow_hoffset.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Number of models to look forward in order to calculate the mean angle. Each angle in the calculation is the compass angle between the current model (n) and all of the models between n and the smoother parameter. The effect is a smoothed camera heading. The larger the smoother, the more smooth the heading will be. </p></body></html>", None))
        self.lineEdit__visualization_follow_hoffset.setText(_translate("MilkMachine", "0", None))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_5), _translate("MilkMachine", "Follow Behind", None))
        self.tabWidget_2.setTabToolTip(self.tabWidget_2.indexOf(self.tab_5), _translate("MilkMachine", "<html><head/><body><p>Create an automated tour with camera views that follow the sequence of the points in the GPS track.</p></body></html>", None))
        self.pushButton_visualization_camera_symbolize.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Clicking this button will populate the &quot;symbtour&quot; field with the names of the &quot;Tour&quot; which have the same settings. The tour name will be appended with a number, which will match other rows if they are the same values and are next to one another. The camera fields that are compared to determine if they are the same are; &quot;altitude&quot;, &quot;altitudemode&quot;, &quot;gxaltitudemode&quot;, &quot;gxhoriz&quot;, &quot;roll&quot;, &quot;tilt&quot;, &quot;range&quot;, and &quot;follow_angle&quot;. Once complete, the user can change the symbology in the &quot;Style&quot; tab to set custom symbols to represent the different tour elements that are the same. The active layer must be in an edit session.</p><p>For example, there is a follow behind tour from row 0-100 and it is named &quot;followtour&quot;. If the user hits the &quot;Symbolize&quot; button, the values in the &quot;symbtour&quot; field (rows 0-100) will have values named like this;</p><p>followtour_0</p><p>followtour_1</p><p>followtour_2</p><p>...</p><p><br/></p></body></html>", None))
        self.pushButton_visualization_camera_symbolize.setText(_translate("MilkMachine", "Symbolize", None))
        self.chkActivate.setToolTip(_translate("MilkMachine", "<html><head/><body><p>When selected, the user can use the mouse to select a point. The text window below will show the results.</p></body></html>", None))
        self.chkActivate.setText(_translate("MilkMachine", "Enable Camera Point Select", None))
        self.txtFeedback.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Resultf of the &quot;click &amp; identify&quot; using the camera point selector.</p></body></html>", None))
        self.pushButton_visualization_camera_tofollow.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Apply the &lt;Camera&gt; settings in the results window to the fields in the &quot;Follow&quot; tab.</p></body></html>", None))
        self.pushButton_visualization_camera_tofollow.setText(_translate("MilkMachine", "To Follow", None))
        self.pushButton_visualization_camera_tocustom.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Apply the &lt;Camera&gt; settings in the results window to the fields in the &quot;Follow&quot; tab.</p></body></html>", None))
        self.pushButton_visualization_camera_tocustom.setText(_translate("MilkMachine", "To Custom", None))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_8), _translate("MilkMachine", "Symbolize | Select", None))
        self.label_13.setText(_translate("MilkMachine", "Tour Name:", None))
        self.groupBox_cameraview_2.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Introduced with KML 2.2, <span style=\" font-family:\'Courier New,courier\';\">&lt;Camera&gt;</span> provides an additional way to specify the observer\'s viewpoint and associated view parameters. <span style=\" font-family:\'Courier New,courier\';\">&lt;Camera&gt;</span> is similar to <span style=\" font-family:\'Courier New,courier\';\">&lt;LookAt&gt;</span>, since both elements define the placement and orientation of a virtual camera that is viewing the Earth. The difference is that LookAt specifies the view in terms of the point of interest that is being viewed. Camera, in contrast, specifies the view in terms of the viewer\'s position and orientation. </p></body></html>", None))
        self.groupBox_cameraview_2.setTitle(_translate("MilkMachine", "LookAt", None))
        self.tabWidget_3.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Create a custom or automated &quot;Circle Around&quot; &lt;LookAt&gt; visualization.</p></body></html>", None))
        self.label_42.setText(_translate("MilkMachine", "*tilt:", None))
        self.lineEdit__visualization_lookat_heading.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Direction (azimuth) of the camera, in degrees. Default=0 (true North). (<a href=\"https://developers.google.com/kml/documentation/kmlreference#headingdiagram\"><span style=\" text-decoration: underline; color:#0000ff;\">See diagram</span></a>.) Values range from 0 to 360 degrees. </p></body></html>", None))
        self.lineEdit__visualization_lookat_heading.setText(_translate("MilkMachine", "0", None))
        self.label_44.setText(_translate("MilkMachine", "gxaltitudemode:", None))
        self.label_49.setText(_translate("MilkMachine", "*altitude:", None))
        self.label_50.setText(_translate("MilkMachine", "*heading:", None))
        self.label_51.setText(_translate("MilkMachine", "*altitudemode:", None))
        self.comboBox_lookat_gxaltitudemode.setToolTip(_translate("MilkMachine", "<html><head/><body><p>A KML extension in the <a href=\"https://developers.google.com/kml/documentation/kmlreference#kmlextensions\"><span style=\" text-decoration: underline; color:#0000ff;\">Google extension namespace</span></a>, allowing altitudes relative to the sea floor. Values are: </p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">relativeToSeaFloor</span> - Interprets the &lt;altitude&gt; as a value in meters above the sea floor. If the point is above land rather than sea, the &lt;altitude&gt; will be interpreted as being above the ground. </li><li style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">clampToSeaFloor</span> - The &lt;altitude&gt; specification is ignored, and the Camera will be positioned on the sea floor. If the point is on land rather than at sea, the Camera will be positioned on the ground. </li></ul><p><br/></p></body></html>", None))
        self.lineEdit__visualization_lookat_tilt.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Rotation, in degrees, of the camera around the <span style=\" font-style:italic;\">X</span> axis. A value of 0 indicates that the view is aimed straight down toward the earth (the most common case). A value for 90 for &lt;tilt&gt; indicates that the view is aimed toward the horizon. Values greater than 90 indicate that the view is pointed up into the sky. Values for &lt;tilt&gt; are clamped at +180 degrees. </p></body></html>", None))
        self.lineEdit_visualization_lookat_altitude.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Distance of the &lt;LookAt&gt; focal point to the Earth\'s surface.</p></body></html>", None))
        self.lineEdit_visualization_lookat_altitude.setText(_translate("MilkMachine", "0", None))
        self.comboBox_lookat_altitudemode.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Specifies how the &lt;altitude&gt; specified for the Camera is interpreted. Possible values are as follows: </p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">relativeToModel</span> - If the &quot;model&quot; field has an &quot;altitude&quot; tag, the the camera altitude can be set as the vertical distance from the model.</li></ul><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">absolute </span>- Interprets the &lt;altitude&gt; as a value in meters above sea level. </li></ul><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">relativeToGround</span> - (default) Interprets the &lt;altitude&gt; as a value in meters above the ground. If the point is over water, the &lt;altitude&gt; will be interpreted as a value in meters above sea level. See <a href=\"https://developers.google.com/kml/documentation/kmlreference#gxaltitudemode\"><span style=\" text-decoration: underline; color:#0000ff;\">&lt;gx:altitudeMode&gt;</span></a> below to specify points relative to the sea floor. </li><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">clampToGround </span>- For a camera, this setting also places the camera &quot;relativeToGround&quot;, since putting the camera exactly at terrain height would mean that the eye would intersect the terrain (and the view would be blocked). </li></ul></body></html>", None))
        self.pushButton_lookat_apply.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Apply the LookAt view changes to the selected points in the active layer. To roll back these edits, select &quot;Cancel for selected layer&quot; in the editor options.</p></body></html>", None))
        self.pushButton_lookat_apply.setText(_translate("MilkMachine", "Apply", None))
        self.label_57.setText(_translate("MilkMachine", "*range:", None))
        self.lineEdit__visualization_lookat_range.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Distance in meters from the point. Since the &quot;Follow Behind&quot; is following the sequence of points, the &quot;range&quot; is the distance between the camera and the point (or row in the table) that is corresponds to. This is the same as the &quot;range&quot; for a KML &lt;LookAt&gt;.</p><p><img src=\":/plugins/milkmachine/lookat.png\"/></p></body></html>", None))
        self.tabWidget_3.setTabText(self.tabWidget_3.indexOf(self.tab_6), _translate("MilkMachine", "Custom", None))
        self.tabWidget_3.setTabToolTip(self.tabWidget_3.indexOf(self.tab_6), _translate("MilkMachine", "<html><head/><body><p>Create a custom &lt;LookAt&gt; view at 1 point or a sequence of selected points. If mulitple points are selected, the same parameters will be applied to all of the points. Latitude and longitude will be automatically calculated (i.e. the x,y of the point).</p></body></html>", None))
        self.lineEdit__visualization_circle_range.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Distance in meters from the point. Since the &quot;Follow Behind&quot; is following the sequence of points, the &quot;range&quot; is the distance between the camera and the point (or row in the table) that is corresponds to. This is the same as the &quot;range&quot; for a KML &lt;LookAt&gt;.</p><p><img src=\":/plugins/milkmachine/lookat.png\"/></p></body></html>", None))
        self.lineEdit__visualization_circle_tilt.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Rotation, in degrees, of the camera around the <span style=\" font-style:italic;\">X</span> axis. A value of 0 indicates that the view is aimed straight down toward the earth (the most common case). A value for 90 for &lt;tilt&gt; indicates that the view is aimed toward the horizon. Values greater than 90 indicate that the view is pointed up into the sky. Values for &lt;tilt&gt; are clamped at +180 degrees. </p><p><img src=\":/plugins/milkmachine/lookat.png\"/></p></body></html>", None))
        self.label_53.setText(_translate("MilkMachine", "*altitude:", None))
        self.label_54.setText(_translate("MilkMachine", "*range:", None))
        self.comboBox_circle_altitudemode.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Specifies how the &lt;altitude&gt; specified for the Camera is interpreted. Possible values are as follows: </p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">relativeToModel</span> - If the &quot;model&quot; field has an &quot;altitude&quot; tag, the the camera altitude can be set as the vertical distance from the model.</li></ul><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">absolute </span>- Interprets the &lt;altitude&gt; as a value in meters above sea level. </li></ul><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">relativeToGround</span> - (default) Interprets the &lt;altitude&gt; as a value in meters above the ground. If the point is over water, the &lt;altitude&gt; will be interpreted as a value in meters above sea level. See <a href=\"https://developers.google.com/kml/documentation/kmlreference#gxaltitudemode\"><span style=\" text-decoration: underline; color:#0000ff;\">&lt;gx:altitudeMode&gt;</span></a> below to specify points relative to the sea floor. </li><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">clampToGround </span>- For a camera, this setting also places the camera &quot;relativeToGround&quot;, since putting the camera exactly at terrain height would mean that the eye would intersect the terrain (and the view would be blocked). </li></ul><p><img src=\":/plugins/milkmachine/lookat.png\"/></p></body></html>", None))
        self.label_55.setText(_translate("MilkMachine", "gxaltitudemode:", None))
        self.label_56.setText(_translate("MilkMachine", "*tilt:", None))
        self.comboBox_circle_gxaltitudemode.setToolTip(_translate("MilkMachine", "<html><head/><body><p>A KML extension in the <a href=\"https://developers.google.com/kml/documentation/kmlreference#kmlextensions\"><span style=\" text-decoration: underline; color:#0000ff;\">Google extension namespace</span></a>, allowing altitudes relative to the sea floor. Values are: </p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">relativeToSeaFloor</span> - Interprets the &lt;altitude&gt; as a value in meters above the sea floor. If the point is above land rather than sea, the &lt;altitude&gt; will be interpreted as being above the ground. </li><li style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">clampToSeaFloor</span> - The &lt;altitude&gt; specification is ignored, and the Camera will be positioned on the sea floor. If the point is on land rather than at sea, the Camera will be positioned on the ground. </li></ul><p><br/></p></body></html>", None))
        self.lineEdit_visualization_circle_altitude.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Distance of the &lt;LookAt&gt; focal point to the Earth\'s surface.</p></body></html>", None))
        self.lineEdit_visualization_circle_altitude.setText(_translate("MilkMachine", "0", None))
        self.label_58.setText(_translate("MilkMachine", "*altitudemode:", None))
        self.pushButton_circle_apply.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Apply the &quot;circle around&quot; view changes to the active layer. &quot;Tour Name&quot; and &quot;FlyTo mode apply to this tool. To roll back these edits, select &quot;Cancel for selected layer&quot; in the editor options.</p></body></html>", None))
        self.pushButton_circle_apply.setText(_translate("MilkMachine", "Apply", None))
        self.label_59.setText(_translate("MilkMachine", "*start heading:", None))
        self.lineEdit__visualization_circle_start_heading.setToolTip(_translate("MilkMachine", "<html><head/><body><p>The start heading (degrees 0-360) of the circle around visualization. This will also be the heading where the circle around ends.</p></body></html>", None))
        self.lineEdit__visualization_circle_start_heading.setText(_translate("MilkMachine", "0", None))
        self.label_60.setText(_translate("MilkMachine", "*duration:", None))
        self.lineEdit__visualization_circle_duration.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Duration (seconds) of the circle around visualization.</p></body></html>", None))
        self.lineEdit__visualization_circle_rotations.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Number (integer &gt; 0) of &quot;Circle Around&quot; rotations. For example, 1 would yield 1 full rotation around the &lt;LookAt&gt; point. A value of 3 would yeild 3 rotations around the &lt;LookAt&gt; point.</p></body></html>", None))
        self.lineEdit__visualization_circle_rotations.setText(_translate("MilkMachine", "1", None))
        self.label_61.setText(_translate("MilkMachine", "*number rotations:", None))
        self.label_62.setText(_translate("MilkMachine", "*direction:", None))
        self.comboBox_visualization_direction.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Rotation direction of the circle around. clockwise or counterclockwise.</p></body></html>", None))
        self.tabWidget_3.setTabText(self.tabWidget_3.indexOf(self.tab_7), _translate("MilkMachine", "Circle Around", None))
        self.tabWidget_3.setTabToolTip(self.tabWidget_3.indexOf(self.tab_7), _translate("MilkMachine", "<html><head/><body><p>The &quot;Circle Around&quot; visualization creates 1 (or more) full rotations around 1 point or a selection of points. If there is a selection of mulitple points, then Milk Machine will find the geometric centroid of those points and that location will be used for the &lt;LookAt&gt;. If only 1 point is selected Latitude and longitude will be automatically calculated (i.e. the x,y of the point).</p></body></html>", None))
        self.checkBox_visualization_streetview.setText(_translate("MilkMachine", "StreetView Mode", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_visualization), _translate("MilkMachine", "Tour", None))
        self.buttonExportTrack.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Export the selected track to .kml. If the active track is an ESRI shapefile point layer, the user will be able to export.</p></body></html>", None))
        self.buttonExportTrack.setText(_translate("MilkMachine", "Export Track", None))
        self.pushButton_TrackInfo.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Click for information about the current audio track</p></body></html>", None))
        self.pushButton_google_earth.setToolTip(_translate("MilkMachine", "<html><head/><body><p>View selected track in Google Earth</p></body></html>", None))
        self.label_visualization_active_2.setText(_translate("MilkMachine", "<html><head/><body><p><span style=\" color:#000000;\">Active Track:</span></p></body></html>", None))
        self.lineEdit_export_active.setToolTip(_translate("MilkMachine", "<html><head/><body><p>The selected layer in the table of contents.</p></body></html>", None))
        self.pushButton_export_audio_file.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Browse to .wav file that will be attached to the kmz or kml file. The name of the file must be formatted by date and time. example;</p><p>YYYYMMDDHHMMSS.wav</p><p>~/20140130124357.wav</p><p>Note: any text after the seconds is ignored, which can be used for other information.</p><p>The difference between the start of the audio and the start of the GPS track will be automatically applied to the &quot;time delay&quot; of the audio in the .kml/.kmz.</p></body></html>", None))
        self.lineEdit_export_audio.setToolTip(_translate("MilkMachine", "<html><head/><body><p>Path to audio file that will be attached to kmz or kml.</p></body></html>", None))
        self.label_33.setText(_translate("MilkMachine", "Audio File:", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_export), _translate("MilkMachine", "Export and Details", None))

import resources_rc
